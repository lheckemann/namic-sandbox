This directory is maintained by 

Andriy Fedorov, College of William and Mary/BWH
Please send questions, bugs or comments to fedorov AT bwh DOT harvard DOT edu

This is a research code, and is under development.

THIS SOFTWARE CANNOT BE USED FOR ANY COMMERCIAL PURPOSE!!!

The code requires PETSc and MPI to be installed prior to compiling the
software. Please do that, and change the CMakeLists.txt file appropriately to
reflect the paths specific to your system. The code has been compiled and
tested with PETSc 2.3.0 configured with --download-f-blas-lapack=1, and with
LAM MPI v7.1. The ITK FEM deformation code is #defined because of the
unresolved problems in the package at the time the MICCAI Open source workshop
deadline has been approaching.

INSTALLATION TIPS: (1) copy ${PETSC_DIR}/bmake/${PETSC_ARCH}/petscconf.h to
${PETSC_DIR}/include; (2) configure LAM MPI with --without-mpi2cpp flags.
I know there should be better ways to address the compilation errors you get
if you don't do these two items. If you figure those out, please let me know.

The code also uses CVS releases of ITK and VTK. You will have to configure
those libraries with mpicc and mpiCC for C and C++ compilers which you will
have after installing MPI.

The code also uses MESH software for computing distance from point to
triangular surface. It is available at http://mesh.berlios.de/

The datasets are located in the Data directory. Once you have the system set
up, you can compile the main driver code, mesher-driver. You can run the test
case as follows:

 bin/mesher-driver --tmp-name=sphere --input-image=./Data/sphere.mhd --resolution=2 --vtk-output=./sphere-mesh.vtk

Remember to boot LAM by using the "lamboot" command prior to running the
experiments. The code does not support multiple processor execution, don't
use something like "-np 2" with mpirun.

This will save the resulting 2 level resolution volume mesh in 
./sphere-mesh.vtk. Please email questions or comments to fedorov AT cs DOT wm
DOT edu

Please check the NAMIC SandBox regularly as the code will be updated until its
transition to the stable ITK tree.

-----------------------------------------------------------------------------

The two current classes in the development are (more detailes are available 
in the source files):

1) BinaryMaskTo3DAdaptiveMeshFilter
  Creates adaptive tetrahedralization of the input binary mask using the
  refinement algorithm described by Neil Molino (Standford University, 2004). 

  WARNING: predicates.c is copyrighted by Jonathan Shewchuk, the source code
  is available here: http://www-2.cs.cmu.edu/~quake/robust.html
  This code is not likely to be a part of ITK. Before the code is released, I
  have to implement something way simpler to break the dependency.

  WARNING: the current version of the driver test makes use of VTK
  UnstructuredGridWriter. The second class developed within this project
  should eliminate this dependency, but this is not the highest priority right
  now. 

2) VTKUnstructuredGridMeshWriter
  Takes the ITK Mesh as input, and saves it in the VTK format. This class is
  not really something finished, but rather quick to have something to save
  the resulting VTK mesh in a file without having the dependency on VTK.

3) VolumeBoundaryCompressionMeshFilter
  Takes the mesh topology and aligns it with the boundary defined by the
  binary image
