#include <stdio.h>
#include <iostream>

#include "itkReplaceSpecialFunctions.h"
#include "vnl/vnl_math.h"
#include <cmath>
#include <cstdlib>

double percision  = 1e-12; //This is a percent error. since there is such a dynamic range!
bool passed = true;

int testLegendre()
{

  const double exp1[231] = {1.,0.11749687499999997,0.11876657713241552,-0.4099625,-0.7125994627944932,2.8199249999999996,
   0.0023009192724609377,0.0046515672225017615,-0.0113546042578125,-0.07659924621265847,
   0.165669377734375,1.5319849242531693,-4.0876575328125,-23.443898801408878,92.773065065625,
   0.00001802338827609558,0.00005465446124963866,-0.0000781679799836792,-0.0013604235149584918,
   0.00028235248564050224,0.0492606501993635,0.013602387444756819,-2.068947308373267,0.4743521758760437,
   82.27841418468958,-141.82798288238757,-2181.6311988095763,8633.231821671025,7.563184997688815e-8,
   3.0579659055433993e-7,-1.2825571835757307e-7,-9.56282276677271e-6,-0.000018778662690409745,
   0.0004593036041558838,0.0018231202009704396,-0.02847121655695354,-0.14200785607336763,
   2.049927592100655,9.188525812891015,-152.7827508864132,-374.7920614402738,9924.649379234537,
   -5590.557181520846,-399882.3632897012,1.5824293059071684e6,1.974779116167373e-10,
   9.980595493274844e-10,5.902435625279655e-10,-3.553977531565993e-8,-1.5760654853735388e-7,
   1.938775662412825e-6,0.000017507840338264306,-0.0001390957402862639,-0.0019266666213059573,
   0.012518470302250732,0.21440686919336333,-1.3770317332475805,-22.888799461114772,171.85556903848476,
   2119.866115683767,-21127.393658662273,-137398.69583416372,2.1068418795227977e6,1.8894799323521338e6,
   -1.2140905409193546e8,4.804444077428892e8,3.5156117418928534e-13,2.1321614201797783e-12,
   3.416143464251807e-12,-8.08141292834831e-11,-5.930588947228968e-10,4.390516279367885e-9,
   7.483875420768243e-8,-2.735764114441895e-7,-0.000010121014905407126,0.00001674562144789432,
   0.0014828160149345552,-0.0010130035024180652,-0.22886564144226182,0.1580285463772182,
   35.62317194278776,-60.344521449631976,-5251.980861090017,19307.08138379303,665480.1001509816,
   -4.450706613752649e6,-6.011892399743142e7,6.881450009799142e8,1.9198738700058744e9,
   -5.51206727244924e10,2.1812556863720306e11,4.539268059183701e-16,3.2118244085472545e-15,
   8.392508914997482e-15,-1.225393146203947e-13,-1.3358649821179865e-12,5.50242800983239e-12,
   1.8533229697725377e-10,-9.99487927696807e-12,-2.8576533837495742e-8,-8.497687841441163e-8,
   4.929038188471467e-6,0.000026110212241641487,-0.0009363610122243557,-0.0062729628728761784,
   0.19159271546294485,1.3173222033039973,-40.90024901395986,-232.66079042583962,8696.41327502174,
   28486.05849633546,-1.7243032380945212e6,101319.00776841125,2.8932449539323467e8,-1.1854071751224709e9,
   -3.453480387860447e10,3.1678884127379364e11,1.6923135914236992e12,-3.497313668233819e13,
   1.383969924313346e14,4.444581764511667e-19,3.594088867171675e-18,1.3024294878812828e-17,
   -1.3067823792240167e-16,-2.030774017732939e-15,2.842361023878982e-15,3.001102822680852e-13,
   1.0563042786614488e-12,-4.9815335960541124e-11,-4.126754700608766e-10,9.300140243449174e-9,
   1.2311727812845014e-7,-1.9395146493766666e-6,-0.00003494650119789292,0.00045128759541701114,
   0.00975193364649927,-0.11691899295949339,-2.6525259518478013,33.1425610074253,682.6812987608861,
   -9851.00902660138,-157582.21443599972,2.880666997925124e6,2.939950716418929e7,-7.665636304196951e8,
   -3.250904273013285e9,1.6809988088196405e11,-2.579174843331306e11,-2.5798305356128125e13,
   1.9257097957852756e14,1.7273657318211885e15,-2.9553612863529784e16,1.1695065195161872e17,
   3.4132318170725925e-22,3.1051044879776593e-21,1.4390967500019944e-20,-1.0098547352174164e-19,
   -2.2334543033072076e-18,-2.4730446804124903e-18,3.411041896935648e-16,2.5287278182145664e-15,
   -5.757358329730448e-14,-8.776435467258608e-13,1.0516468819233798e-11,2.794842078043019e-10,
   -2.0189447255014997e-9,-8.99675482608273e-8,4.0256135123545086e-7,0.00002978337361012398,
   -0.0000876874150403204,-0.010095848521310303,0.024711247655911137,3.452780194288124,
   -10.196292620888457,-1163.6387896174326,5190.274385233464,373508.07686323277,-2.6151291104772077e6,
   -1.0860435333109097e8,1.168761595017964e9,2.63352788919203e10,-4.3535502244245483e11,
   -4.436192364206721e12,1.2566508584741412e14,1.6946206159670762e14,-2.4487112503432708e16,
   1.4614815691256672e17,2.1243428079594312e18,-3.2085504125362844e19,1.2696994587379735e20,
   2.110758274508429e-25,2.133567683542984e-24,1.2044890883944527e-23,-5.684281903304106e-23,
   -1.861502719391543e-21,-6.640211641864973e-21,2.8473073312637533e-19,3.4090977029720022e-18,
   -4.536732197344442e-17,-1.1751472327011916e-15,6.53263472319204e-15,3.973117825976957e-13,
   -3.4854588670066596e-13,-1.3967374980487174e-10,-3.6727015101693074e-10,5.1682960519663694e-8,
   2.7383900935518434e-7,-0.000020119587836448008,-0.00014223182390787393,0.008185740545886102,
   0.06359000129901075,-3.4380110292721624,-24.970219005266348,1462.3286639946602,8120.474209994501,
   -613046.547289735,-1.6990114602270056e6,2.4424026771769324e8,-2.2185224103090265e8,
   -8.80064589104657e10,4.775132392072062e11,2.6628764576183797e13,-2.9606997520617e14,
   -5.873467886600777e15,1.1675257126874766e17,5.717857451959221e17,-2.8852774558954504e19,
   1.3039508769667313e20,3.149875178610135e21,-4.3520262021163365e22,1.7221999354133885e23
};

  const double exp2[231] = {
  1.,0.07648387499999999,0.2436621017715927,0.08219349999999985,-1.4619726106295563,1.835613,
   0.0009749638558359378,0.006212073911378592,0.0218858990731875,-0.017245002506308147,
   -0.42141572219562506,0.3449000501261629,7.8789236663475,-31.308852513348103,39.310542667305015,
   4.97126757861826e-6,0.000047512348452864126,0.00031875653545832764,0.0009857155815635376,
   -0.0048522614063901,-0.050944080910611304,0.11294170544047072,2.139651398245675,-8.151799162735367,
   -59.616078372962754,578.3518579355897,-1896.5409107232867,2381.245124186272,1.3579350288378274e-8,
   1.730442152393002e-7,1.7122235094074744e-6,0.000011173063252611092,0.00001707439190340383,
   -0.00047220819512660856,-0.0032810027121394757,0.020713132184586387,0.26266410734132056,
   -1.49134551729022,-16.53625366918296,157.07533402691507,340.777543364895,-11595.816212287487,
   74634.35985130537,-226285.4847991079,284117.89289929083,2.308002955638973e-11,3.6764144799543695e-10,
   4.808939056950177e-9,4.731084002486076e-8,2.6784685855747695e-7,-6.572199427152245e-7,
   -0.000026662172037500876,-0.00011073074210418929,0.002083744355787797,0.018154383757522336,
   -0.1961262995024795,-1.996982213327457,24.75488294675903,136.81004648456795,-3228.2813859857624,
   7161.913943559395,233504.31432328938,-2.80464516825067e6,1.5394312485333111e7,-4.472178085585332e7,
   5.615145025651678e7,2.67462135695033e-14,5.11248046423673e-13,8.31611966602391e-12,
   1.0894993650505854e-10,1.0130518303599094e-9,3.757715380708777e-9,-5.94055682958866e-8,
   -9.96141802420412e-7,-4.48662382235272e-7,0.00013261659056012354,0.0006983416934242138,
   -0.017667713691605233,-0.13568749568478466,2.7561633358904163,16.77696084282331,-477.8971457424612,
   -232.81916552971578,70300.61819877582,-528245.3450436295,-3.8092305399510963e6,1.0269399301956852e8,
   -9.277258175985602e8,4.673662278448275e9,-1.3216793053867039e10,1.6594645461614202e10,
   2.2479714894210926e-17,5.013106625213127e-16,9.751549109479836e-15,1.593279613337114e-13,
   2.0311051720010206e-12,1.642064798337381e-11,-8.324788592367724e-12,-2.372133768777201e-9,
   -2.5167961055415494e-8,1.5797842645577996e-7,5.788450994252955e-6,6.865758937977081e-6,
   -0.001113303925218364,-0.0049473751611214005,0.22368654989961903,1.038948783835494,
   -48.629115453538134,-61.17885548381114,10212.694676614918,-52957.73133995435,-1.518630530591067e6,
   2.4046537540506974e7,-1.2995928383911178e7,-3.5375572210793138e9,5.250816490500624e10,
   -4.118949123371526e11,1.9663582443049868e12,-5.458706358297307e12,6.853803061439258e12,
   1.4327797533370564e-20,3.6516363855664084e-19,8.266539741107333e-18,1.6170847866363693e-16,
   2.604618964504881e-15,3.1028540633966046e-14,1.7903182414908966e-13,-2.174828314996107e-12,
   -6.376231912924533e-11,-3.7756956447783515e-10,9.562650942755355e-9,1.782349947296062e-7,
   -8.946102362874143e-7,-0.000050615311938321794,-9.27650418775671e-6,0.013434119916109074,
   0.023903845791330362,-3.654080617181668,-0.6812664675488528,988.7721433275938,-4543.824155073863,
   -228129.35427452216,2.9619782349923514e6,2.6898519347923573e7,-9.811812746662953e8,6.69329738136671e9,
   1.0028056381839984e11,-2.8155477350021445e12,3.308824851800706e13,-2.3829798011893544e14,
   1.0963616535399249e15,-3.0026816822238015e15,3.7700853563723055e15,7.162388729200144e-24,
   2.053612506317007e-22,5.303187734578377e-21,1.2078375030491694e-19,2.345018697977138e-18,
   3.635182017298451e-17,3.775588930048475e-16,4.555174463631655e-16,-7.13058438299813e-14,
   -1.241509774816425e-12,1.7068095856957595e-13,3.373826587635757e-10,3.7130995980530594e-9,
   -6.572725262110078e-8,-1.6819712899689927e-6,0.000010447337065773813,0.0006049751687736075,
   -0.0015829771585635093,-0.20821307934770236,0.5413781882287202,70.34651262499509,-408.1782949467481,
   -21685.868442741277,272872.38786188397,4.809559531927147e6,-1.3110302642143875e8,1.896885283510084e7,
   3.725374189647911e10,-5.391944614698509e11,-7.991223898292064e11,1.3909524460702897e14,
   -2.4909596005678485e15,2.5710280525995196e16,-1.748006111814768e17,7.828374793560357e17,
   -2.1220281893394737e18,2.664360811137655e18,2.883196022450279e-27,9.185277323484602e-26,
   2.6646029341777126e-24,6.923544069765891e-23,1.5710807865829131e-21,2.979431079942548e-20,
   4.290951596976081e-19,3.3122653277665256e-18,-3.353531523655471e-17,-1.5154582924929416e-15,
   -1.68955131070476e-14,2.0066369334015741e-13,8.452251417002666e-12,3.787766454156085e-11,
   -2.654272586669777e-9,-3.968567836215878e-8,7.190900182120201e-7,0.000020456021032637934,
   -0.00019563563087198534,-0.009092048119187828,0.06729298375987887,3.8186602100588876,
   -34.345791355885744,-1486.781247730825,21324.032544907517,470738.67000161356,-1.2278807659243835e7,
   -6.623471440464699e7,5.37992554257012e9,-4.4447967204245895e10,-1.235004180345771e12,
   3.4340192422578906e13,-2.1885356064062216e14,-5.706637277534682e15,1.7594856257204275e17,
   -2.5655751837246684e18,2.435131535236136e19,-1.5882325182080352e20,6.968238005714063e20,
   -1.8736020372753576e21,2.3524436993167312e21};
     
  const double x1 = 0.245;
  const double x2 = 0.623;
  
  unsigned int counter = 0;
  for( int l=0;l<=20;l=l+2 )
  {
    for (int m=-l;m<=l;m++)
    {
      double val = LegendreP( l, m, x1 );
      if ( vcl_fabs(exp1[counter] / val - 1.0) >= percision )
      {
        printf("Failed Legnedre test- (%d,%d) : (%f,%f,%f)\n",l,m,val,exp1[counter],val/exp1[counter]);
        passed = false; 
      }
      ++counter;
    }
  } 

  if (!passed)
  {
    std::cout << "[FAILED] 1st Legendre" << std::endl;
    return EXIT_FAILURE;
  }    

  counter = 0;
  for( int l=0;l<=20;l=l+2 )
  {
    for (int m=-l;m<=l;m++)
    {
      double val = LegendreP( l, m, x2 );
      if ( vcl_fabs(exp2[counter] / val - 1.0) >= percision )
      {
        printf("Failed Legnedre test- (%d,%d) : (%f,%f,%f)\n",l,m,val,exp2[counter],val/exp2[counter]);
        passed = false; 
      }
      ++counter;
    }
  } 

  if (!passed)
  {
    std::cout << "[FAILED] 2nd Legendre" << std::endl;
    return EXIT_FAILURE;
  }    

  std::cout << "Passed Legendre" << std::endl;
  return EXIT_SUCCESS;

}

int testBinomialCoeff()
{
  int n,k;
  
  //Test n=0;
  n=0;  k=1;
  if (binomialCoeff(n,k) != 0 )
  {
    std::cerr << "binomail coeff failed n=0" <<std::endl;
    return EXIT_FAILURE;
  }
    
  //test k > n
  n=20; k=21;
  if (binomialCoeff(n,k) != 0 )
  {
    std::cerr << "binomail coeff failed k>n" <<std::endl;
    return EXIT_FAILURE;
  }
  
  //test k=0
  k=0;
  if (binomialCoeff(n,k) != 1 )
  {
    std::cerr << "binomail coeff failed k=0" <<std::endl;
    return EXIT_FAILURE;
  }
  
  //test k< n-k
  k = 12;
  if (binomialCoeff(n,k) != 125970 )
  {
    std::cerr << "binomail coeff failed k<n-k" <<std::endl;
    return EXIT_FAILURE;
  }
  
  //test k= n-k
  k = 10;
  if (binomialCoeff(n,k) != 184756 )
  {
    std::cerr << "binomail coeff failed k=n-k" <<std::endl;
    return EXIT_FAILURE;
  }

  //test k= n-k
  k = 3;
  if (binomialCoeff(n,k) != 1140 )
  {
    std::cerr << "binomail coeff failed k=n-k" <<std::endl;
    return EXIT_FAILURE;
  }

  std::cout << "Passed BinomailCoeff test" << std::endl;
  return EXIT_SUCCESS;  
}

int main( int argc, char * argv[] )
{

  if ( testLegendre() )
    return EXIT_FAILURE;
    
  if ( testBinomialCoeff() )
    return EXIT_FAILURE;

  return EXIT_SUCCESS;  
}
