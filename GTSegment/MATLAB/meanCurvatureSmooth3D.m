function Ism = meanCurvatureSmooth3D( Iin )
% function Ism = meanCurvatureSmooth3D( Iin )
% This function smoothes a 3D volume.
% Input Parameters:
%   Iin is the input data volume
% Return Value:
%   Ism is the smoothed data volume

% Preprocessing
delT = 0.1; % smoothing time step
delX = 1; delY = 1; delZ = 1; % smoothing constants
dimX = size(Iin,2); % image constants
dimY = size(Iin,1);
dimZ = size(Iin,3);

epsilon = 0.001; % removes singularities in H

% Extend borders
I = zeros(dimY+delY,dimX+delX,dimZ+delZ);
I(1+delY:dimY+delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
    = Iin;                                                  % Interior Pixels
I(1:delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
    = Iin(delY:-1:1,:,:);                                   % (low,x,z) Pixels
I(dimY+delY+1:dimY+2*delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
    = Iin(dimY:-1:dimY-delY+1,:,:);                         % (high,x,z) Pixels
I(1+delY:dimY+delY,1:delX,1+delZ:dimZ+delZ) ...
    = Iin(:,delX:-1:1,:);                                   % (y,low,z) Pixels
I(1+delY:dimY+delY,dimX+delX+1:dimX+2*delX,1+delZ:dimZ+delZ) ...
    = Iin(:,dimX:-1:dimX-delX+1,:);                         % (y,high,z) Pixels
I(1+delY:dimY+delY,1+delX:dimX+delX,1:delZ) ...
    = Iin(:,:,delZ:-1:1);                                   % (y,x,low) Pixels
I(1+delY:dimY+delY,1+delX:dimX+delX,dimZ+delZ+1:dimZ+2*delZ) ...
    = Iin(:,:,dimZ:-1:dimZ-delZ+1);                         % (y,x,high) Pixels

% find Iy
Iy = (I(1+2*delY:dimY+2*delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
			-I(1:dimY,1+delX:dimX+delX,1+delZ:dimZ+delZ)) ...
		 /(2*delY);

% find Ix
Ix = (I(1+delY:dimY+delY,1+2*delX:dimX+2*delX,1+delZ:dimZ+delZ) ...
			-I(1+delY:dimY+delY,1:dimX,1+delZ:dimZ+delZ)) ...
		 /(2*delX);

% find Iz
Iz = (I(1+delY:dimY+delY,1+delX:dimX+delX,1+2*delZ:dimZ+2*delZ) ...
			-I(1+delY:dimY+delY,1+delX:dimX+delX,1:dimZ)) ...
		 /(2*delZ);

% find Iyy
Iyy = (I(1+2*delY:dimY+2*delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
			 -2*I(1+delY:dimY+delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
			 +I(1:dimY,1+delX:dimX+delX,1+delZ:dimZ+delZ)) ...
			/delY^2;

% find Ixx
Ixx = (I(1+delY:dimY+delY,1+2*delX:dimX+2*delX,1+delZ:dimZ+delZ) ...
			 -2*I(1+delY:dimY+delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
			 +I(1+delY:dimY+delY,1:dimX,1+delZ:dimZ+delZ)) ...
			/delX^2;

% find Izz
Izz = (I(1+delY:dimY+delY,1+delX:dimX+delX,1+2*delZ:dimZ+2*delZ) ...
			 -2*I(1+delY:dimY+delY,1+delX:dimX+delX,1+delZ:dimZ+delZ) ...
			 +I(1+delY:dimY+delY,1+delX:dimX+delX,1:dimZ)) ...
			/delZ^2;

% find Ixy
Ixy = (I(1+2*delY:dimY+2*delY,1+2*delX:dimX+2*delX,1+delZ:dimZ+delZ) ...
			 -I(1+2*delY:dimY+2*delY,1:dimX,1+delZ:dimZ+delZ) ...
			 -I(1:dimY,1+2*delX:dimX+2*delX,1+delZ:dimZ+delZ) ...
			 +I(1:dimY,1:dimX,1+delZ:dimZ+delZ)) ...
			/(4*delX*delY);

% find Iyz
Iyz = (I(1+2*delY:dimY+2*delY,1+delX:dimX+delX,1+2*delZ:dimZ+2*delZ) ...
			 -I(1:dimY,1+delX:dimX+delX,1+2*delZ:dimZ+2*delZ) ...
			 -I(1+2*delY:dimY+2*delY,1+delX:dimX+delX,1:dimZ) ...
			 +I(1:dimY,1+delX:dimX+delX,1:dimZ)) ...
			/(4*delY*delZ);

% find Ixz
Ixz = (I(1+delY:dimY+delY,1+2*delX:dimX+2*delX,1+2*delZ:dimZ+2*delZ) ...
			 -I(1+delY:dimY+delY,1:dimX,1+2*delZ:dimZ+2*delZ) ...
			 -I(1+delY:dimY+delY,1+2*delX:dimX+2*delX,1:dimZ) ...
			 +I(1+delY:dimY+delY,1:dimX,1:dimZ)) ...
			/(4*delX*delZ);

% Compute Ism
normGradPhi = (Ix.^2+Iy.^2+Iz.^2).^(1/2);
H = [(Iy.^2+Iz.^2).*Ixx-2*Ix.*Iy.*Ixy ...
		 + (Ix.^2+Iz.^2).*Iyy-2*Iy.*Iz.*Iyz ...
		 + (Ix.^2+Iy.^2).*Izz-2*Ix.*Iz.*Ixz] ...
    ./ (Ix.^2+Iy.^2+Iz.^2+epsilon).^(3/2);
Ism = Iin + delT * H .* normGradPhi;
