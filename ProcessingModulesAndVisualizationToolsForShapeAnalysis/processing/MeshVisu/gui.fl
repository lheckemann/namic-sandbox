# data file for the Fltk User Interface Designer (fluid)
version 1.0104 
header_name {.h} 
code_name {.cxx}
class gui {open
} {
  Function {make_window()} {open
  } {
    Fl_Window mainWindow {
      label MeshVisu
      xywh {442 143 570 269} type Double resizable visible
    } {
      Fl_Group {} {
        label {Choose Mode} open
        xywh {10 20 220 140} box ENGRAVED_BOX
      } {
        Fl_Round_Button rdMesh {
          label {Load Mesh SO}
          callback {rdAttribute->clear() ;
rdLoad->clear() ;
rdSave->clear() ;
m_Visualization->Radio(1) ;}
          xywh {16 34 80 25} down_box ROUND_DOWN_BOX value 1
        }
        Fl_Round_Button rdAttribute {
          label {Load Attribute File}
          callback {rdMesh->clear() ;
rdLoad->clear() ;
rdSave->clear() ;
m_Visualization->Radio(2);}
          xywh {16 54 80 25} down_box ROUND_DOWN_BOX align 52
        }
        Fl_Round_Button rdLoad {
          label {Load Attribute Mesh SO}
          callback {rdMesh->clear() ;
rdAttribute->clear() ;
rdSave->clear() ;
m_Visualization->Radio(3);}
          xywh {16 74 80 25} down_box ROUND_DOWN_BOX when 6
        }
        Fl_Round_Button rdSave {
          label Save
          callback {rdMesh->clear() ;
rdAttribute->clear() ;
rdLoad->clear() ;
m_Visualization->Radio(4);}
          xywh {17 95 74 30} down_box ROUND_DOWN_BOX
        }
        Fl_Button btnOK {
          label OK
          callback {if ( rdMesh->value() || 
     rdAttribute->value() || 
     rdLoad->value() || 
     rdSave->value() )
{
    fc->show();

    if (rdSave->value())
      fc->type(fc->type() | fc->CREATE);
    else
       fc->type(fc->type() & (~fc->CREATE));

    while (fc->visible())
     Fl::wait();

    m_Visualization->Click(fc->value());
}}
          xywh {25 120 150 30}
        }
      }
      Fl_Box m_sovDisplay {
        xywh {240 5 321 255} box ENGRAVED_BOX
        code0 {\#include <sovFlVTKDisplay.h>}
        class {sov::FlVTKDisplay}
      }
      Fl_Box m_Visualization {
        private xywh {30 245 100 25} hide
        code0 {\#include "AttrVisualizer.h"}
        class AttrVisualizer
      }
      Fl_Group {} {
        label {Color Scheme} open
        xywh {10 185 220 75} box ENGRAVED_BOX
      } {
        Fl_Round_Button rdPValue {
          label {P-value}
          callback {rdDistanceMap->clear();
btnDistanceMapSettings->deactivate();
btnPValueSettings->activate();
m_Visualization->ColorScheme(0) ;}
          xywh {19 192 25 25} down_box ROUND_DOWN_BOX value 1
        }
        Fl_Round_Button rdDistanceMap {
          label {Distance Map}
          callback {rdPValue->clear();
btnPValueSettings->deactivate();
btnDistanceMapSettings->activate();
m_Visualization->ColorScheme(1) ;}
          xywh {19 222 25 25} down_box ROUND_DOWN_BOX
        }
        Fl_Button btnDistanceMapSettings {
          label {Settings...}
          xywh {135 224 90 25} deactivate
        }
        Fl_Button btnPValueSettings {
          label {Settings...}
          callback {getPValueSettings();}
          xywh {135 194 90 25}
        }
      }
    }
    codeblock {fc = new Fl_File_Chooser(".", "*", Fl_File_Chooser::SINGLE, "Fl_File_Chooser Test");} {open
    } {}
  }
  Function {show(int argc, char **argv)} {open return_type void
  } {
    codeblock {m_Visualization->SetDisplay(m_sovDisplay);} {open
    } {}
    codeblock {mainWindow->show(argc, argv) ;} {open
    } {}
  }
  decl {Fl_File_Chooser *fc;} {}
  Function {getPValueSettings()} {open
  } {
    Fl_Window dlgPValueSettings {
      label {P-Value Settings} open
      xywh {424 464 518 239} type Double resizable modal visible
    } {
      Fl_Box boxImageFrame {
        xywh {160 10 350 220} box ENGRAVED_BOX resizable
      }
      Fl_Group {} {open
        xywh {10 10 140 220} box ENGRAVED_BOX
      } {
        Fl_Button btnOk {
          label OK
          callback {float t = edThreshold->value();
float c0 = edC0->value();
float c1 = edC1->value();
float c2 = edC2->value();
m_Visualization->SetPValue(t, c0, c1, c2);
dlgPValueSettings->hide();}
          xywh {30 195 95 25}
        }
        Fl_Button btnDefault {
          label {Set to default}
          callback {edThreshold->value(0.05);
edC0->value(0);
edC1->value(0.25);
edC2->value(0.67);} selected
          xywh {30 165 95 25}
        }
        Fl_Value_Input edC0 {
          label {Color 0}
          xywh {85 55 40 30}
        }
        Fl_Value_Input edC2 {
          label {Color 2}
          xywh {85 135 40 30} value 0.67
        }
        Fl_Value_Input edC1 {
          label {Color 1}
          xywh {85 95 40 30} value 0.25
        }
        Fl_Value_Input edThreshold {
          label Threshold
          xywh {85 20 40 25} value 0.05
        }
      }
    }
    code {ptrImage= new Fl_PNM_Image("pvalue.ppm");
ptrImage->draw(10,10);
boxImageFrame->image(ptrImage);
ptrImage->draw(10,10);
dlgPValueSettings->show();} {}
    code {float t, h0, h1, h2 ;
m_Visualization->GetPValue(t, h0, h1, h2);
edThreshold->value(t);
edC0->value(h0);
edC1->value(h1);
edC2->value(h2);} {}
  }
  decl {Fl_PNM_Image *ptrImage;} {}
} 
