PROJECT (SurfaceMap)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6.3 FATAL_ERROR)

FIND_PACKAGE(VTK REQUIRED)
IF(NOT VTK_USE_RENDERING)
  MESSAGE(FATAL_ERROR "Example ${PROJECT_NAME} requires VTK_USE_RENDERING.")
ENDIF(NOT VTK_USE_RENDERING)
INCLUDE(${VTK_USE_FILE})

FIND_PACKAGE(OpenCV REQUIRED)
IF(OPENCV_BUILD_SETTINGS_FILE AND NOT SKIP_OPENCV_BUILD_SETTINGS_FILE)
  INCLUDE(${CMAKE_ROOT}/Modules/CMakeImportBuildSettings.cmake)
  CMAKE_IMPORT_BUILD_SETTINGS(${OPENCV_BUILD_SETTINGS_FILE})
ENDIF(OPENCV_BUILD_SETTINGS_FILE AND NOT SKIP_OPENCV_BUILD_SETTINGS_FILE)

# Add compiler flags needed to use OPENCV.
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OPENCV_REQUIRED_C_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPENCV_REQUIRED_CXX_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OPENCV_REQUIRED_LINK_FLAGS}")
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${OPENCV_REQUIRED_LINK_FLAGS}")
SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${OPENCV_REQUIRED_LINK_FLAGS}")

# Add include directories needed to use OPENCV.
INCLUDE_DIRECTORIES(BEFORE ${OPENCV_INCLUDE_DIRS})

# Add link directories needed to use OPENCV.
LINK_DIRECTORIES(${OPENCV_LIBRARY_DIRS})

ADD_LIBRARY(vtkOpenCVSupport SHARED
  vtkOpenCVRendererDelegate.cxx
  vtkOpenCVOpticalFlowCallback.cxx
)

ADD_EXECUTABLE(VTKVideoOverlay
  VTKVideoOverlay.cxx
)

TARGET_LINK_LIBRARIES(vtkOpenCVSupport vtkRendering ${OpenCV_LIBS} )
TARGET_LINK_LIBRARIES(VTKVideoOverlay vtkHybrid ${OpenCV_LIBS} vtkOpenCVSupport)


