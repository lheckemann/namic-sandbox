#ifndef __vtkTractographyVisualizationGUI_h
#define __vtkTractographyVisualizationGUI_h

#include "vtkSlicerBaseGUIWin32Header.h"
#include "vtkSlicerModuleGUI.h"
#include "vtkTractographyVisualizationLogic.h"


class vtkKWCheckButtonWithLabel;
class vtkKWMenuButtonWithLabel;
class vtkSlicerNodeSelectorWidget;

class VTK_TRACTOGRAPHYVISUALIZATION_EXPORT vtkTractographyVisualizationGUI
  : public vtkSlicerModuleGUI
{
public:
  static vtkTractographyVisualizationGUI *New();
  vtkTypeMacro(vtkTractographyVisualizationGUI,vtkSlicerModuleGUI);
  void PrintSelf(ostream& os, vtkIndent indent);

  // Get/Set logic.
  vtkGetObjectMacro(Logic, vtkTractographyVisualizationLogic);
  vtkSetObjectMacro(Logic, vtkTractographyVisualizationLogic);

  // Set the logic pointer from parent class pointer. Overloads implementation
  // in vtkSlicerModulesGUI to allow loadable modules.
  virtual void SetModuleLogic(vtkSlicerLogic *logic)
  {
    this->SetLogic(
        reinterpret_cast<vtkTractographyVisualizationLogic *>(logic)); 
  }

  // Get/Set MRML node.
  vtkGetObjectMacro(TractographyVisualizationNode,
                    vtkMRMLTractographyVisualizationNode);

  // Get the categorization of the module.
  const char *GetCategory() const
  {
    return "Tractography";
  }

  // Create widgets
  virtual void BuildGUI();

  // Add obsereves to GUI widgets.
  virtual void AddGUIObservers();
  
  // Remove obsereves to GUI widgets.
  virtual void RemoveGUIObservers();
  
  // Process events generated by Logic.
  virtual void ProcessLogicEvents(vtkObject *caller, unsigned long event,
                                  void *callData) { }

  // Pprocess events generated by GUI widgets.
  virtual void ProcessGUIEvents(vtkObject *caller, unsigned long event,
                                void *callData);

  // Pprocess events generated by MRML.
  virtual void ProcessMRMLEvents(vtkObject *caller, unsigned long event, 
                                 void *callData);

  // Describe behavior at module startup and exit.
  virtual void Enter() { };
  virtual void Exit() { };

protected:
  vtkTractographyVisualizationGUI();
  virtual ~vtkTractographyVisualizationGUI();
  vtkTractographyVisualizationGUI(const vtkTractographyVisualizationGUI&);
  void operator=(const vtkTractographyVisualizationGUI&);

  // Updates GUI widgets based on parameters values in MRML node
  void UpdateGUI();

  // Updates parameters values in MRML node based on GUI widgets 
  void UpdateMRML();
  
  void SetThresholdSlider(float min, float max, float value);

  vtkTractographyVisualizationLogic *Logic;
  vtkMRMLTractographyVisualizationNode* TractographyVisualizationNode;

  // Parameters.
  vtkSlicerNodeSelectorWidget* NodeSelector;

  vtkKWScaleWithEntry* Threshold;
  vtkSlicerNodeSelectorWidget* InputModelSelector;
  vtkMRMLNode *oldInputModelNode;
  bool inputNodeAvailable;
  vtkKWPushButton* LoadButton;

  vtkKWMenuButtonWithLabel *ValueTypeMenu;

  vtkKWMenuButtonWithLabel *RemovalModeMenu;

  vtkSlicerNodeSelectorWidget* OutputModelSelector;

  //vtkSlicerNodeSelectorWidget* ColorSelector;

  vtkKWCheckButtonWithLabel *TubeButton;

  vtkKWPushButton* SaveButton;

  bool UpdateGui;

  vtkKWCheckButtonWithLabel *RecordFaButton;
  vtkKWCheckButtonWithLabel *RecordRaButton;
  vtkKWCheckButtonWithLabel *RecordTraceButton;
  vtkKWCheckButtonWithLabel *RecordAvgFaButton;
};

#endif
