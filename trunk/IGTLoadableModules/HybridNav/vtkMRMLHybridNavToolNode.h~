/*=auto=========================================================================

  Portions (c) Copyright 2009 Brigham and Women's Hospital (BWH) All Rights Reserved.

  See Doc/copyright/copyright.txt
  or http://www.slicer.org/copyright/copyright.txt for details.

  Program:   3D Slicer
  Module:    $RCSfile: vtkMRMLHybridNavToolNode.h,v $
  Date:      $Date: 2009/10/15 17:12:29 $
  Version:   $Revision: 1.3 $

=========================================================================auto=*/

#ifndef VTKMRMLHYBRIDNAVTOOLNODE_H_
#define VTKMRMLHYBRIDNAVTOOLNODE_H_

#include "vtkHybridNavWin32Header.h"
#include "vtkMRML.h"
#include "vtkMRMLNode.h"
#include "vtkMRMLStorageNode.h"

#include <string>
#include <map>
#include <vector>
#include <set>

#include "vtkObject.h"

class VTK_HybridNav_EXPORT vtkMRMLHybridNavToolNode : public vtkMRMLNode
{

 public:

  //----------------------------------------------------------------
  // Standard methods for MRML nodes
  //----------------------------------------------------------------

  static vtkMRMLHybridNavToolNode *New();
  vtkTypeMacro(vtkMRMLHybridNavToolNode,vtkMRMLNode);

  void PrintSelf(ostream& os, vtkIndent indent);

  virtual vtkMRMLNode* CreateNodeInstance();

  // Description:
  // Set node attributes
  virtual void ReadXMLAttributes( const char** atts);

  // Description:
  // Write this node's information to a MRML file in XML format.
  virtual void WriteXML(ostream& of, int indent);

  // Description:
  // Copy the node's attributes to this object
  virtual void Copy(vtkMRMLNode *node);

  // Description:
  // Get node XML tag name (like Volume, Model)
  virtual const char* GetNodeTagName()
    {return "HybridNavTool";};

  // method to propagate events generated in mrml
  virtual void ProcessMRMLEvents ( vtkObject *caller, unsigned long event, void *callData );

 protected:
  //----------------------------------------------------------------
  // Constructor and destroctor
  //----------------------------------------------------------------

  vtkMRMLHybridNavToolNode();
  ~vtkMRMLHybridNavToolNode();
  vtkMRMLHybridNavToolNode(const vtkMRMLHybridNavToolNode&);
  void operator=(const vtkMRMLHybridNavToolNode&);


 public:
  //----------------------------------------------------------------
  // Tool properties
  //----------------------------------------------------------------

  vtkGetMacro( Calibrated, int );
  vtkSetMacro( Calibrated, int );

  // tool name and description
  void SetToolName(const char* str) { this->ToolName = str; }
  const char* GetToolName() { return this->ToolName.c_str(); }
  void SetToolDescription(const char* str) { this->ToolDescription = str; }
  const char* GetToolDescription() { return this->ToolDescription.c_str(); }

 private:
  //BTX
  std::string ToolName;
  std::string ToolDescription;
  //ETX
  int Calibrated;

}

#endif /* VTKMRMLHYBRIDNAVNODETOOL_H_ */
