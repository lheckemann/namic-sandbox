#   
# How to obtain the source code
#    

The code is in the ITK's svn repositories under the folder
   NamicSandBox/trunk/MultiImageRegistration/
   
If you dont have access to ITK's
svn servers, you can get read access to the repository by simply
downloading it according to the instructions in the following Wiki page:

http://wiki.na-mic.org/Wiki/index.php/Engineering:SandBox

If you want to only have access to binary files, I will put some
binary files to 
   http://people.csail.mit.edu/serdar/groupwise/

#
#  HOW TO COMPILE
#

Libraries:
   ITK: The code was compiled with version 3.0
        to obtain ITK libraries go to http://www.itk.org/HTML/Download.htm
   
   libANN(not required): This is an open source library implementing nearest neighbor methods
           This library is required in order to use registration based on joint entropy using KNN.
           The code was compiled with version 1.1.1
               this library is available to download at http://www.cs.umd.edu/~mount/ANN/
               
           If you dont have ANN libraries the source code will still compile, allowing you to use congealing 
           and other groupwise registration methods. There are two binary files that are created, one is using 
           ANN and the other not. If you dont have libANN, you should be able to use the binary which is not using 
           ANN.
           
Compilation using cmake:
   The source code can be compiled using cmake. After downloading the code 
   go to the folder where the code resides. 
              
   Type "ccmake ." in the command line. cmake will generate a makefile for the project. 
   Cmake can be downloaded from http://www.cmake.org/HTML/Download.html.
   
   After running "ccmake ." type "make" in command line. This will compile the code 
   and generate the following binaries
   
      GroupwiseRegistration  - Binary for group wise registration 
      PairwiseRegistration   - Binary for pairwise mutual information based registration
      TransformImage         - Transforms an image using a transformation file generated 
                               by GroupwiseRegistration.
      CreateImageSetAffine   - Applies 30 random affine transforms to the input image and saves 
                               the output.
      CreateImageSetBspline  - Applies 30 random bspline transforms to the input image and saves 
                               the output.                               
   
   
#
# How to run the binary "GroupwiseRegistration"
#

Type in the command line

   GroupwiseRegistration fnames.init parameters.init

"fnames.init" contains the names of the input files and the path for the output files. 
See "fnames.init" for an example.

"parameters.init" contains the parameters of the groupwise registration. It allows you to 
select which objective function and transformation model to use. For more information
about the use of parameters See example "parameters.init" file. Most parameters have default values
so only first few parameters at the beginning of file should be changed.


When you run GroupwiseRegistration, it displays a bunch of information to std::cout. 
You will see on output like this
   
   Iter number1 number2 number3

number1 denotes total number of iterations done by the program,
number2 denotes total number of iterations done in current scale and transformation type
number3 shows the value of the objective function.(As we use stochastic subsampling, this value
        might increase for some iterations)
        
At the end of registration the binary will create a bunch of files and folders in the
output path specified in "fnames.init"

   Foldername:
   
   DeformationFields2D: Contains 2D slices of deformation fields.
                        Useful to visualize the deformation field created by 
                        Bspline tranform.
                        
   DeformationFields3D: Contains 3D deformation field images
   
   MeanImages:          Contains the mean images before and after registration. 
                        Also 2D slices of mean images are shown.
   
   OriginalSlices:      Contains slices of input images
   
   RegisteredImages:    Contains output images
   
   RegisteredSlices:    Contains slices of registered images
   
   RegistrationParameters: Contains text files about the resulting deformation for each input image.
                        These text files can be given as input to "TransformImage" and applied to 
                        other images.
                        
#
#  About the implementation
#                        

All metrics are implementing in a multi-threaded fashion. So the algorithm will run faster on
computers with multiple CPU's.

