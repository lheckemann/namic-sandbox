Directories

======================================================================
Code     ---  the source code for this project
Data     ---  data for running examples and tests
Examples ---  scripts show how to run the executables
Testing  ---  code for testing this project

Compilation
======================================================================
This code depends on a recent CVS version of ITK (>= 1 DEC 2006).
You should compile this code using CMake.

On Unix systems, create a build directory, run ccmake, and then run
make.

% mkdir SVMShapeAnalysis-Build
% cd SVMShapeAnalysis-Build
% ccmake ../SVMShapeAnalysis/
% make

You can then run the tests with the command (pass -VV argument to get
details):

% ctest

Applications
======================================================================
The above compilation process builds four applications:

svmTrain --- train a SVM from example measurement vectors

svmClassify --- classify vectors using a trained SVM

svmJackknife --- train and classify repeatedly, shuffeling the data
each time.  Classification error is reported.

svmDDCalculator --- compute the discriminative direction of a vector
(or of the support vectors) given a SVM

General-purpose Classes
======================================================================
Several general purpose classes are defined by this project:

SVMDiscriminativeDirectionCalculator --- computes the discriminative
direction of a vector (or of a support vector) given a trained SVM

JackknifeClassificationErrorEstimatorBase --- an abstract class that
applies jackknife estimation of classification error to a classifier.
The details of the classifier are specified by a subclass.  Inputs:
labeled training vectors, training and test set sizes, and number of
jackknife iterations.  Outputs: classification error, confusion
matrix, and misclassification histogram.  Subclasses must implement the
Train and Classify methods.  The Train method trains a classifier
given a random subsample of the training data.  The classify method
uses the trained classifier to classify a vector.

SVMJackknifeClassificationErrorEstimator --- concrete implementation
of JackknifeClassificationErrorEstimatorBase using
itkSupportVectorMachine class as a classifier and itkSVMSolver1 to
train the SVM.

