// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "D:/work/boston/AttrVisualization/gui.h"

inline void gui::cb_btnOK_i(Fl_Button*, void*) {
  m_Visualization->Click(edtFilename->value());
}
void gui::cb_btnOK(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_btnOK_i(o,v);
}

inline void gui::cb_rdMesh_i(Fl_Round_Button*, void*) {
  rdAttribute->clear() ;
rdLoad->clear() ;
rdSave->clear() ;
m_Visualization->Radio(1) ;
}
void gui::cb_rdMesh(Fl_Round_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_rdMesh_i(o,v);
}

inline void gui::cb_rdAttribute_i(Fl_Round_Button*, void*) {
  rdMesh->clear() ;
rdLoad->clear() ;
rdSave->clear() ;
m_Visualization->Radio(2);
}
void gui::cb_rdAttribute(Fl_Round_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_rdAttribute_i(o,v);
}

inline void gui::cb_rdLoad_i(Fl_Round_Button*, void*) {
  rdMesh->clear() ;
rdAttribute->clear() ;
rdSave->clear() ;
m_Visualization->Radio(3);
}
void gui::cb_rdLoad(Fl_Round_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_rdLoad_i(o,v);
}

inline void gui::cb_rdSave_i(Fl_Round_Button*, void*) {
  rdMesh->clear() ;
rdAttribute->clear() ;
rdLoad->clear() ;
m_Visualization->Radio(4);
}
void gui::cb_rdSave(Fl_Round_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_rdSave_i(o,v);
}

Fl_Double_Window* gui::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = mainWindow = new Fl_Double_Window(508, 336);
    w = o;
    o->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(10, 5, 180, 180);
      o->box(FL_ENGRAVED_BOX);
      o->end();
    }
    { Fl_Button* o = btnOK = new Fl_Button(55, 145, 80, 25, "OK");
      o->callback((Fl_Callback*)cb_btnOK);
    }
    { sov::FlVTKDisplay* o = m_sovDisplay = new sov::FlVTKDisplay(195, 5, 305, 320);
      o->box(FL_ENGRAVED_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { AttrVisualizer* o = m_Visualization = new AttrVisualizer(30, 245, 100, 25);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
      o->hide();
    }
    edtFilename = new Fl_Input(90, 15, 85, 25, "File name");
    { Fl_Round_Button* o = rdMesh = new Fl_Round_Button(11, 44, 80, 25, "Load Mesh SO");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rdMesh);
    }
    { Fl_Round_Button* o = rdAttribute = new Fl_Round_Button(11, 64, 80, 25, "Load Attribute File");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rdAttribute);
      o->align(36|FL_ALIGN_INSIDE);
    }
    { Fl_Round_Button* o = rdLoad = new Fl_Round_Button(11, 84, 80, 25, "Load Attribute Mesh SO");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rdLoad);
      o->when(FL_WHEN_RELEASE_ALWAYS);
    }
    { Fl_Round_Button* o = rdSave = new Fl_Round_Button(11, 105, 80, 25, "Save");
      o->down_box(FL_ROUND_DOWN_BOX);
      o->callback((Fl_Callback*)cb_rdSave);
    }
    o->end();
    o->resizable(o);
  }
  return w;
}

void gui::show(int argc, char **argv) {
  m_Visualization->SetDisplay(m_sovDisplay); {
      }
      mainWindow->show(argc, argv) ; {
          }
}
