# \author    Hans J. Johnson"
# \date     $Date: 2007-02-02 07:20:50 -0600 (Fri, 02 Feb 2007) $
# \brief    This module tests common components of loading any image file format, i.e., if it
#           is a valid image, then these items must be testable:
# \fn        proc CoreImageTest {}
# \params  They should be self expanatory
# \result    1 in case testing is complete or 0 in case of a fatal error
proc interactiveShowHide {pathToRegressionDir dateString} {
    global B2_BATCH_MODE
## Test precondition requirements

########################################
########################################
#Pretest must be available in all modules
########################################
########################################
        set ModuleName "interactiveShowHide"
        set ModuleAuthor "Hans J. Johnson"
        set ModuleDescription "Test the b2 show, hide, active, and mode commands"
        global MODULE_SUCCESS
        global MODULE_FAILURE
        set LogFile [ StartModule $ModuleName $ModuleAuthor $ModuleDescription $dateString]
#        close $LogFile
#        set LogFile stderr

    if {$B2_BATCH_MODE != 0} {
    return $MODULE_FAILURE
    }

################################################ GE-4X Data ###############################################################
# Load a T1 Image Generated by BRAINS
    set T1image [ b2 load image $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/ANON013_T1.hdr]
        if {$T1image == -1} {
            puts stderr "ERROR: Failed to load T1 strictAnalyze75 image"
        } else {
            puts stderr "SUCCESS: Loaded T1 strictAnalyze75 image"
        }

    set TestRoiID [b2 load roi $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/user/101tricia_rcaud.zroi]
        if {$TestRoiID == -1} {
            puts stderr "ERROR: Failed to load roi"
        } else {
            puts stderr "SUCCESS: Loaded roi"
        }

#Set up initial display
    b2 show viewer tracker
    b2 show time-graph

########################################
########################################
# Run Tests
########################################
########################################
    set SubTestDes "Did brains2 load an image?"
        set response [tk_dialog .interactiveQuestions "Did brains2 , and display an image?" "$SubTestDes" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 version"
        set versiontest [b2 version]
        set SubTestQuestion "Does this dialog box show an appropriate Revision and Date string? \ntemplate: brains2 \{BUILD_DATE: 2005-03-07\} \{BUILD_TIME: 14:54:13\}\nreturned value:$versiontest"
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

#{axi 472x464+290+45 on}
        set oldaxi [ b2 window geometry axi ]
        set SubTestDes "b2 window geometry axi geometry= 300x300+290+45"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes
#{cor 472x464+294+572 on}
        set oldcor [ b2 window geometry cor ]
        set SubTestDes "b2 window geometry cor geometry= 300x300+294+572"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes
#{sag 472x464+804+572 on}
        set oldsag [ b2 window geometry sag ]
        set SubTestDes "b2 window geometry sag geometry= 300x300+804+572"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes
#{surf 472x464+800+45 on}
        set oldsurf [ b2 window geometry surf ]
        set SubTestDes "b2 window geometry surf geometry= 300x300+800+45"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

#Restore old values
        set SubTestDes "Restore old window geometries"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        b2 window geometry [ lindex [ lindex $oldaxi 0 ] 0] geometry= [ lindex [ lindex $oldaxi 0 ] 1]
        b2 window geometry [ lindex [ lindex $oldcor 0 ] 0] geometry= [ lindex [ lindex $oldcor 0 ] 1]
        b2 window geometry [ lindex [ lindex $oldsag 0 ] 0] geometry= [ lindex [ lindex $oldsag 0 ] 1]
        b2 window geometry [ lindex [ lindex $oldsurf 0 ] 0] geometry= [ lindex [ lindex $oldsurf 0 ] 1]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

#Promp user to open certains windows selector button
        set SubTestDes "Manually open selector Window"
        set SubTestQuestion "Please manually open the selector window by pressing the Slector button in any window.  Does it work?"
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "Manually open display properties Window"
        set SubTestQuestion "Please manually open, and test the display properties window by pressing the Display Properties button in the selector window.  Does it work?"
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "Manually open Current ROI properties Window"
        set SubTestQuestion "Please manually open, and test the Current ROI window by pressing the Current ROI button in any window.  Does it work?"
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes


        set SubTestDes "b2 hide viewer axi"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 show viewer axi"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 hide viewer cor"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 show viewer cor"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 hide viewer sag"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 show viewer sag"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 hide viewer surf"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 show viewer surf"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 hide viewer tracker"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 show viewer tracker"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 hide time-graph"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 show time-graph"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 hide everything"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

        set SubTestDes "b2 show everything"
        set SubTestQuestion "Did \"$SubTestDes\" work?"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

########################## Test show and hide of cross hairs ######################################
      set SubTestDes "Show hide cross hairs"
      set SubTestQuestion "Please test the showing and hiding of cross hairs in each window. Did it work OK?"
      set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
      ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes


########################## Test show and hide commands ######################################
# Load a GE-4x Image
#cd $pathToRegressionDir/SGI/MR/4x-B1/TEST/15_002
        set ge4x [b2 load image $pathToRegressionDir/SGI/MR/4x-B1/TEST/15_002/19771.002.040]
        if {$ge4x == -1} {
            puts stderr "ERROR: Failed to load ge4x image"
        } else {
            puts stderr "SUCCESS: Loaded ge4x image"
        }

# Load Landmarks
    set TestLandID [b2 load landmark $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/user/landmark_locations]
        if {$TestLandID == -1} {
            puts stderr "ERROR: Failed to load landmarks"
        } else {
            puts stderr "SUCCESS: Loaded landmarks"
        }

#Load ROI's
    set TestRoiID2 [b2 load roi $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/user/surf_hem.yroi]
        if {$TestRoiID == -1} {
            puts stderr "ERROR: Failed to load roi"
        } else {
            puts stderr "SUCCESS: Loaded roi"
        }

# Load a BRAINS transform
    set b1xfrm [b2 load transform $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/resample_parameters]
        if {$b1xfrm == -1} {
            puts stderr "ERROR: Failed to load BRAINS transform"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS transform"
        }

    set b1tal [ b2 load talairach-parameters $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/talairach_parameters]
        if {$b1tal == -1} {
            puts stderr "ERROR: Failed to load BRAINS talairach-parameters"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS talairach-parameters"
        }
    set b1tal2 [ b2 load talairach-parameters $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/bogus_left_parameters]
        if {$b1tal == -1} {
            puts stderr "ERROR: Failed to load BRAINS bogus_left_parameters"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS bogus_left_parameters"
        }


#User Feed back that the transform is correct
    if {$b1xfrm != -1 && $ge4x != -1} {
        b2 set transform $b1xfrm image $ge4x
    }

# Load a Classified Image Generated by BRAINS
    set classImage [ b2 load image $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/ANON013_stereo.hdr]
        if {$classImage == -1} {
            puts stderr "ERROR: Failed to load BRAINS Classified image"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS Classified image"
        }
    set SubTestDes "set classImageDiscrete [make_discrete_image $classImage]"
        set SubTestQuestion "Does scrolling through the volume after \"$SubTestDes\" work?  (Try it, please.)"
        set commandresponse [ eval $SubTestDes ]
        set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
        ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes


# Load a BRAINS style masks (cran_mask.*)
    set brainMask [ b2 load mask $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/cran_mask.default]
        if {$brainMask == -1} {
            puts stderr "ERROR: Failed to load BRAINS mask (.default)"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS mask (.default)"
        }

#run Class Volumes
    set brainMask2 [ b2 load mask $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/cran_mask.segment]
        if {$brainMask == -1} {
            puts stderr "ERROR: Failed to load BRAINS mask (.segment)"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS mask (.segment)"
        }

### Need special logic to not test gtsurface when GTS is not compiled.
    global BRAINS2_GTS;
        if {  ${BRAINS2_GTS} != "OFF" } {
    set b1surf [b2 load GTSurface $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/ANON013_130_l_dec35.gts]
        if {$b1surf == -1} {
            puts stderr "ERROR: Failed to load BRAINS format GTSurface"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS format GTSurface"
        }
    set b1surf2 [b2 load GTSurface $pathToRegressionDir/SGI/MR/4x-B1/TEST/10_ACPC/ANON013_130_r_dec35.gts]
        if {$b1surf == -1} {
            puts stderr "ERROR: Failed to load BRAINS format GTSurface"
        } else {
            puts stderr "SUCCESS: Loaded BRAINS format GTSurface"
        }
        }
##Get rid of all the third or more copies of images that are displayed
    ReportTestStatus $LogFile  [ expr { [ b2 destroy transform $b1xfrm ] != -1 } ] $ModuleName "Destroying transform $b1xfrm"

        if {  ${BRAINS2_GTS} != "OFF" } {
        set objecttype   "GTSurface  mask       landmark     ROI         talairach-parameters  image"
        set loadedobject "$b1surf  $brainMask $TestLandID  $TestRoiID  $b1tal                $ge4x"
        } else {
        set objecttype   "mask       landmark     ROI         talairach-parameters  image"
        set loadedobject "$brainMask $TestLandID  $TestRoiID  $b1tal                $ge4x"
        }

        set numobjtypes [llength $objecttype ]

        for {set currobjtype 0} { $currobjtype < $numobjtypes } {incr currobjtype} {
#Test showing and hiding images
            set SubTestDes "b2 hide every [ lindex $objecttype $currobjtype ] "
                set SubTestQuestion "Did \"$SubTestDes\" work?"
                set commandresponse [ eval $SubTestDes ]
                set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
                ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

                set SubTestDes "b2 show [ lindex $objecttype $currobjtype ] [lindex $loadedobject $currobjtype ] "
                set SubTestQuestion "Did \"$SubTestDes\" work?"
                set commandresponse [ eval $SubTestDes ]
                set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
                ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

                set SubTestDes "b2 hide [ lindex $objecttype $currobjtype ] [lindex $loadedobject $currobjtype ] "
                set SubTestQuestion "Did \"$SubTestDes\" work?"
                set commandresponse [ eval $SubTestDes ]
                set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
                ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

                set SubTestDes "b2 show every [ lindex $objecttype $currobjtype ] "
                set SubTestQuestion "Did \"$SubTestDes\" work?"
                set commandresponse [ eval $SubTestDes ]
                set response [tk_dialog .interactiveQuestions "$SubTestDes" "$SubTestQuestion" warning 1 "Yes" "No"]
                ReportTestStatus $LogFile  [ expr  {$response != 1 }   ] $ModuleName $SubTestDes

#This should make testing a lot faster.
                ReportTestStatus $LogFile  [ expr { [ b2 destroy every [ lindex $objecttype $currobjtype ] ] != -1 } ] $ModuleName "Destroying every [ lindex $objecttype $currobjtype ]"
        }
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy image $classImage ] != -1 } ] $ModuleName "Destroying image $classImage"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy mask $brainMask2 ] != -1 } ] $ModuleName "Destroying mask $brainMask2"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy roi $TestRoiID2 ] != -1 } ] $ModuleName "Destroying roi $TestRoiID2"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy GTSurface $b1surf2 ] != -1 } ] $ModuleName "Destroying GTSurface $b1surf2"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy talairach-parameters $b1tal2 ] != -1 } ] $ModuleName "Destroying talairach-parameters $b1tal2"

#    ReportTestStatus $LogFile  [ expr { [ b2 destroy image $ge4x ] != -1 } ] $ModuleName "Destroying image $ge4x"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy landmark $TestLandID ] != -1 } ] $ModuleName "Destroying landmark $TestLandID"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy mask $brainMask ] != -1 } ] $ModuleName "Destroying mask $brainMask"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy roi $TestRoiID ] != -1 } ] $ModuleName "Destroying roi $TestRoiID"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy GTSurface $b1surf ] != -1 } ] $ModuleName "Destroying GTSurface $b1surf"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy talairach-parameters $b1tal ] != -1 } ] $ModuleName "Destroying talairach-parameters $b1tal"
#    ReportTestStatus $LogFile  [ expr { [ b2 destroy image $T1image ] != -1 } ] $ModuleName "Destroying image $T1image"


########################################
########################################
#Posttest must be available in all modules
########################################
########################################
        return [ StopModule  $LogFile $ModuleName ]
        return $MODULE_SUCCESS
}

