# data file for the Fltk User Interface Designer (fluid)
version 1.0106 
header_name {.h} 
code_name {.cpp}
class ctfMainUI {open : {public rtsTask}
} {
  Function {ctfMainUI(const char* name, long period): rtsTask(name, period, false, 10)} {open
  } {
    Fl_Window MainFrame {
      label DaVinci
      callback {Hidden = true;
MainFrame->show();} open
      private xywh {136 74 610 535} type Single box THIN_DOWN_BOX color 51 hide
      code0 {\#include "ctfMainUIIncludes.h"} non_modal
    } {
      Fl_Return_Button MasterResetEnc {
        label {Reset Enc.}
        callback {ResetEncoders(0);}
        xywh {395 240 110 20} box THIN_UP_BOX align 16
      }
      Fl_Button Close {
        label Close
        callback {Hidden = true;
MainFrame->hide();}
        xywh {545 510 60 20} box THIN_UP_BOX align 16
      }
      Fl_Button MasterZeroVoltage1 {
        label Zero
        xywh {55 35 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box MasterAxis1 {
        label {Axis 1}
        xywh {5 30 40 20}
      }
      Fl_Value_Slider MasterMotorCurrent1 {
        label {Motor Current}
        callback {double sliderValue = ((Fl_Slider *)o)->value();
SetMotorCurrent(0, sliderValue);}
        xywh {100 35 290 20} type {Horz Knob} box THIN_DOWN_BOX align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output MasterEncoderCount1 {
        label {Encoder (count)}
        xywh {395 35 110 20} box THIN_DOWN_BOX align 5
      }
      Fl_Value_Output MasterPotVolt1 {
        label {Pot. (volt)}
        xywh {510 35 95 20} box THIN_DOWN_BOX align 5
      }
      Fl_Button MasterZeroVoltage2 {
        label Zero
        xywh {55 65 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box MasterAxis2 {
        label {Axis 2}
        xywh {5 60 40 20}
      }
      Fl_Value_Slider MasterMotorCurrent2 {
        callback {double sliderValue = ((Fl_Slider *)o)->value();
SetMotorCurrent(1, sliderValue);}
        xywh {100 65 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output MasterEncoderCount2 {
        xywh {395 65 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output MasterPotVolt2 {
        xywh {510 65 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button ZeroVoltage3 {
        label Zero
        xywh {55 95 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box MasterAxis3 {
        label {Axis 3}
        xywh {5 90 40 20}
      }
      Fl_Value_Slider MasterMotorCurrent3 {
        callback {double sliderValue = ((Fl_Slider *)o)->value();
SetMotorCurrent(2, sliderValue);}
        xywh {100 95 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output MasterEncoderCount3 {
        xywh {395 95 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output MasterPotVolt3 {
        xywh {510 95 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button MasterZeroVoltage4 {
        label Zero
        xywh {55 125 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box MasterAxis4 {
        label {Axis 4}
        xywh {5 120 40 20}
      }
      Fl_Value_Slider MasterMotorCurrent4 {
        callback {double sliderValue = ((Fl_Slider *)o)->value();
SetMotorCurrent(3, sliderValue);}
        xywh {100 125 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output MasterEncoderCount4 {
        xywh {395 125 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output MasterPotVolt4 {
        xywh {510 125 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button MasterZeroVoltage5 {
        label Zero
        xywh {55 155 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box MasterAxis5 {
        label {Axis 5}
        xywh {5 150 40 20}
      }
      Fl_Value_Slider MasterMotorCurrent5 {
        callback {double sliderValue = ((Fl_Slider *)o)->value();
SetMotorCurrent(4, sliderValue);}
        xywh {100 155 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output MasterEncoderCount5 {
        xywh {395 155 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output MasterPotVolt5 {
        xywh {510 155 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button MasterZeroVoltage6 {
        label Zero
        xywh {55 185 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box MasterAxis6 {
        label {Axis 6}
        xywh {5 180 40 20}
      }
      Fl_Value_Slider MasterMotorCurrent6 {
        callback {double sliderValue = ((Fl_Slider *)o)->value();
SetMotorCurrent(5, sliderValue);}
        xywh {100 185 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output MasterEncoderCount6 {
        xywh {395 185 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output MasterPotVolt6 {
        xywh {510 185 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button MasterZeroVoltage7 {
        label Zero
        xywh {55 215 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box MasterAxis7 {
        label {Axis 7}
        xywh {5 210 40 20}
      }
      Fl_Value_Slider MasterMotorCurrent7 {
        callback {double sliderValue = ((Fl_Slider *)o)->value();
SetMotorCurrent(6, sliderValue);} selected
        xywh {100 215 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output MasterEncoderCount7 {
        xywh {395 215 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output MasterPotVolt7 {
        xywh {510 215 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Return_Button SlaveResetEnc {
        label {Reset Enc.}
        callback {ResetEncoders(1);}
        xywh {395 510 110 20} box THIN_UP_BOX align 16
      }
      Fl_Button SlaveZeroVoltage1 {
        label Zero
        xywh {55 305 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box SlaveAxis1 {
        label {Axis 1}
        xywh {5 300 40 20}
      }
      Fl_Value_Slider SlaveMotorCurrent1 {
        label {Motor Current}
        callback {//double slider_value = ((Fl_Slider *)o)->value();
//bio.SetCurrentLimitIndices (true, 0x00, 0x00);
//short dac_data = (short)(1000.0*slider_value);
//printf("CL value changed %4.1f %d\\n", slider_value, dac_data);
//bio.SetCurrentLimit(dac_data);
//bio.LoadCurrentLimits();}
        xywh {100 305 290 20} type {Horz Knob} box THIN_DOWN_BOX align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output SlaveEncoderCount1 {
        label {Encoder (count)}
        xywh {395 305 110 20} box THIN_DOWN_BOX align 5
      }
      Fl_Value_Output SlavePotVolt1 {
        label {Pot. (volt)}
        xywh {510 305 95 20} box THIN_DOWN_BOX align 5
      }
      Fl_Button SlaveZeroVoltage2 {
        label Zero
        xywh {55 335 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box SlaveAxis2 {
        label {Axis 2}
        xywh {5 330 40 20}
      }
      Fl_Value_Slider SlaveMotorCurrent2 {
        callback {//double slider_value = ((Fl_Slider *)o)->value();
//bio.SetCurrentLimitIndices (true, 0x00, 0x00);
//short dac_data = (short)(1000.0*slider_value);
//printf("CL value changed %4.1f %d\\n", slider_value, dac_data);
//bio.SetCurrentLimit(dac_data);
//bio.LoadCurrentLimits();}
        xywh {100 335 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output SlaveEncoderCount2 {
        xywh {395 335 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output SlavePotVolt2 {
        xywh {510 335 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button SlaveZeroVoltage3 {
        label Zero
        xywh {55 365 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box SlaveAxis3 {
        label {Axis 3}
        xywh {5 360 40 20}
      }
      Fl_Value_Slider SlaveMotorCurrent3 {
        callback {//double slider_value = ((Fl_Slider *)o)->value();
//bio.SetCurrentLimitIndices (true, 0x00, 0x00);
//short dac_data = (short)(1000.0*slider_value);
//printf("CL value changed %4.1f %d\\n", slider_value, dac_data);
//bio.SetCurrentLimit(dac_data);
//bio.LoadCurrentLimits();}
        xywh {100 365 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output SlaveEncoderCount3 {
        xywh {395 365 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output SlavePotVolt3 {
        xywh {510 365 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button SlaveZeroVoltage4 {
        label Zero
        xywh {55 395 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box SlaveAxis4 {
        label {Axis 4}
        xywh {5 390 40 20}
      }
      Fl_Value_Slider SlaveMotorCurrent4 {
        callback {//double slider_value = ((Fl_Slider *)o)->value();
//bio.SetCurrentLimitIndices (true, 0x00, 0x00);
//short dac_data = (short)(1000.0*slider_value);
//printf("CL value changed %4.1f %d\\n", slider_value, dac_data);
//bio.SetCurrentLimit(dac_data);
//bio.LoadCurrentLimits();}
        xywh {100 395 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output SlaveEncoderCount4 {
        xywh {395 395 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output SlavePotVolt4 {
        xywh {510 395 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button SlaveZeroVoltage5 {
        label Zero
        xywh {55 425 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box SlaveAxis5 {
        label {Axis 5}
        xywh {5 420 40 20}
      }
      Fl_Value_Slider SlaveMotorCurrent5 {
        callback {//double slider_value = ((Fl_Slider *)o)->value();
//bio.SetCurrentLimitIndices (true, 0x00, 0x00);
//short dac_data = (short)(1000.0*slider_value);
//printf("CL value changed %4.1f %d\\n", slider_value, dac_data);
//bio.SetCurrentLimit(dac_data);
//bio.LoadCurrentLimits();}
        xywh {100 425 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output SlaveEncoderCount5 {
        xywh {395 425 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output SlavePotVolt5 {
        xywh {510 425 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button SlaveZeroVoltage6 {
        label Zero
        xywh {55 455 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box SlaveAxis6 {
        label {Axis 6}
        xywh {5 450 40 20}
      }
      Fl_Value_Slider SlaveMotorCurrent6 {
        callback {//double slider_value = ((Fl_Slider *)o)->value();
//bio.SetCurrentLimitIndices (true, 0x00, 0x00);
//short dac_data = (short)(1000.0*slider_value);
//printf("CL value changed %4.1f %d\\n", slider_value, dac_data);
//bio.SetCurrentLimit(dac_data);
//bio.LoadCurrentLimits();}
        xywh {100 455 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output SlaveEncoderCount6 {
        xywh {395 455 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output SlavePotVolt6 {
        xywh {510 455 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Button SlaveZeroVoltage7 {
        label Zero
        xywh {55 485 40 20} box THIN_UP_BOX down_box THIN_DOWN_BOX
      }
      Fl_Box SlaveAxis7 {
        label {Axis 7}
        xywh {5 480 40 20}
      }
      Fl_Value_Slider SlaveMotorCurrent7 {
        callback {//double slider_value = ((Fl_Slider *)o)->value();
//bio.SetCurrentLimitIndices (true, 0x00, 0x00);
//short dac_data = (short)(1000.0*slider_value);
//printf("CL value changed %4.1f %d\\n", slider_value, dac_data);
//bio.SetCurrentLimit(dac_data);
//bio.LoadCurrentLimits();}
        xywh {100 485 290 20} type {Horz Knob} box THIN_DOWN_BOX labeltype NO_LABEL align 5 minimum -3 maximum 3 step 0.05
      }
      Fl_Value_Output SlaveEncoderCount7 {
        xywh {395 485 110 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
      Fl_Value_Output SlavePotVolt7 {
        xywh {510 485 95 20} box THIN_DOWN_BOX labeltype NO_LABEL align 5
      }
    }
    code {Hidden = true;} {}
  }
  Function {show()} {open
  } {
    code {Hidden = false;
MainFrame->show();} {}
  }
  Function {hide()} {open
  } {
    code {Hidden = true;
MainFrame->hide();} {}
  }
  Function {is_hidden()} {open return_type bool
  } {
    code {return Hidden;} {}
  }
  Function {Run()} {open return_type void
  } {
    code {CMN_LOG_CLASS(7) << "Run" << std::endl;

rtsTimeIndex index, now;
bool result;
unsigned int iter;

cmnStdVectorDataObject<long, DDI_LOPOMOCO_MAX_NB_AXIS> RawPositions;
cmnStdVectorDataObject<short, DDI_LOPOMOCO_MAX_NB_AXIS> PotFeedbacks;

ReadPositionsCommand->Execute(RawPositions);
PotFeedbacksCommand->Execute(PotFeedbacks);

CMN_LOG_CLASS(7) << "Tick: " << index.Ticks()	
		 << "\\nRawPositions: " << RawPositions
		 << "\\nPotFeedbacks: " << PotFeedbacks
		 << std::endl;

MasterEncoderCount1->value(RawPositions[0]);
MasterEncoderCount2->value(RawPositions[1]);
MasterEncoderCount3->value(RawPositions[2]);
MasterEncoderCount4->value(RawPositions[3]);
MasterEncoderCount5->value(RawPositions[4]);
MasterEncoderCount6->value(RawPositions[5]);
MasterEncoderCount7->value(RawPositions[6]);

SlaveEncoderCount1->value(RawPositions[8]);
SlaveEncoderCount2->value(RawPositions[9]);
SlaveEncoderCount3->value(RawPositions[10]);
SlaveEncoderCount4->value(RawPositions[11]);
SlaveEncoderCount5->value(RawPositions[12]);
SlaveEncoderCount6->value(RawPositions[13]);
SlaveEncoderCount7->value(RawPositions[14]);

MasterPotVolt1->value(PotFeedbacks[0]);
MasterPotVolt2->value(PotFeedbacks[1]);
MasterPotVolt3->value(PotFeedbacks[2]);
MasterPotVolt4->value(PotFeedbacks[3]);
MasterPotVolt5->value(PotFeedbacks[4]);
MasterPotVolt6->value(PotFeedbacks[5]);
MasterPotVolt7->value(PotFeedbacks[6]);

SlavePotVolt1->value(PotFeedbacks[8]);
SlavePotVolt2->value(PotFeedbacks[9]);
SlavePotVolt3->value(PotFeedbacks[10]);
SlavePotVolt4->value(PotFeedbacks[11]);
SlavePotVolt5->value(PotFeedbacks[12]);
SlavePotVolt6->value(PotFeedbacks[13]);
SlavePotVolt7->value(PotFeedbacks[14]);


// last two commands
StateDataTable.Advance();
Fl::flush();} {}
  }
  Function {Configure(const char *filename = NULL)} {open return_type void
  } {
    code {CMN_LOG_CLASS(3) << "Configure" << std::endl;

// should load a configuration file here to load control specific parameters} {}
  }
  Function {Provides()} {open return_type {std::vector<std::string>}
  } {
    code {std::vector<std::string> *provides = new std::vector<std::string>;
return *provides;} {}
  }
  Function {Startup()} {open return_type void
  } {
    code {CMN_LOG_CLASS(3) << "Startup" << std::endl;

unsigned int index;

// set initial current to zero to be safe
for (index = 0; index < DDI_LOPOMOCO_MAX_NB_AXIS; index++) {
    CurrentLimits[index] = 0.0;
}

// retrieve all the commands to communicate with the control task
if (Device) {

    CMN_LOG_CLASS(3) << "Get method by name \\"Positions\\"" << std::endl;
    ReadPositionsCommand = Device->GetReadMethodByName("Positions");
    CMN_LOG_CLASS(3) << *ReadPositionsCommand << std::endl;

    CMN_LOG_CLASS(3) << "Get method by name \\"PotFeedbacks\\"" << std::endl;
    PotFeedbacksCommand = Device->GetReadMethodByName("PotFeedbacks");
    CMN_LOG_CLASS(3) << *PotFeedbacksCommand << std::endl;

    CMN_LOG_CLASS(3) << "Get method by name \\"Reset Encoders\\"" << std::endl;
    ResetEncodersCommand = Device->GetWriteMethodByName("Reset Encoders");
    CMN_LOG_CLASS(3) << *ResetEncodersCommand << std::endl;

    CMN_LOG_CLASS(3) << "Get method by name \\"Write Current Limits\\"" << std::endl;
    WriteCurrentLimitsCommand = Device->GetWriteMethodByName("Write Current Limits");
    CMN_LOG_CLASS(3) << *WriteCurrentLimitsCommand << std::endl;

    CMN_LOG_CLASS(3) << "Get method by name \\"Load Goals\\"" << std::endl;
    LoadGoalsCommand = Device->GetWriteMethodByName("Load Goals");
    CMN_LOG_CLASS(3) << *LoadGoalsCommand << std::endl;


} else {
    CMN_LOG_CLASS(1) << "No device get methods" << std::endl;
}

this->show();} {}
  }
  Function {Cleanup()} {open return_type void
  } {}
  decl {ddiCommandBase* ResetEncodersCommand;} {}
  decl {CMN_DECLARE_SERVICES(ctfMainUI, CMN_NO_DYNAMIC_CREATION);} {}
  decl {bool Hidden;} {}
  Function {ResetEncoders(short masterSlave)} {open return_type void
  } {
    code {if (Device)	{
    cmnBasicTypeDataObject<short> commandIndex ;
    CMN_LOG_CLASS(7) << "Resetting encoders for master" << std::endl;
    commandIndex.Data = masterSlave;
    ResetEncodersCommand->Execute(commandIndex);
}} {}
  }
  Function {SetMotorCurrent(int axisNumber, double value)} {open return_type void
  } {
    code {CMN_LOG_CLASS(7) << "SetMotorCurrent for axis: " << axisNumber << " to: " << value << std::endl;
// Modify the current limit for the given axis
CurrentLimits[axisNumber] = value;
// Send the new voltages
WriteCurrentLimitsCommand->Execute(CurrentLimits);
// And apply them
cmnBasicTypeDataObject<bool> tmp;
LoadGoalsCommand->Execute(tmp);} {}
  }
  decl {ddiCommandBase* ReadPositionsCommand;} {}
  decl {ddiCommandBase* PotFeedbacksCommand;} {}
  decl {ddiCommandBase* WriteCurrentLimitsCommand;} {}
  decl {ddiCommandBase* LoadGoalsCommand;} {}
  decl {cmnStdVectorDataObject<double, DDI_LOPOMOCO_MAX_NB_AXIS> CurrentLimits;} {}
} 
