/*
  
$Id: main.dox,v 1.14 2006/02/01 07:29:22 anton Exp $

*/

/*!
  \mainpage CISST

  The cisst package is a collection of libraries designed to ease the
  development of computer assisted intervention systems.  See the
  modules for detailled documentation.
  
  The cisst package is released under the following terms:
  <pre>
CISST Software License Agreement(c)

Copyright 2005 Johns Hopkins University (JHU) All Rights Reserved.

This software ("CISST Software") is provided by The Johns Hopkins
University on behalf of the copyright holders and
contributors. Permission is hereby granted, without payment, to copy,
modify, display and distribute this software and its documentation, if
any, for research purposes only, provided that (1) the above copyright
notice and the following four paragraphs appear on all copies of this
software, and (2) that source code to any modifications to this
software be made publicly available under terms no more restrictive
than those in this License Agreement. Use of this software constitutes
acceptance of these terms and conditions.

The CISST Software has not been reviewed or approved by the Food and
Drug Administration, and is for non-clinical, IRB-approved Research
Use Only.

IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE TO
ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
EVEN IF THE COPYRIGHT HOLDERS AND CONTRIBUTORS HAVE BEEN ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.

THE COPYRIGHT HOLDERS AND CONTRIBUTORS SPECIFICALLY DISCLAIM ANY
EXPRESS OR IMPLIED WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, AND NON-INFRINGEMENT.

THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS." THE COPYRIGHT HOLDERS AND CONTRIBUTORS HAVE NO OBLIGATION TO
PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
  </pre>
*/

/*!
  \defgroup cisstCommon Common Tools   

  Common tools used for most CISST applications.  The main features of
  cisstCommon are:

  - A log system.  There is a set of classes and macros which allows
    the user to log some text information to any c++ stream, including
    a file or stdout.  For further details, see cmnLogger,
    cmnClassRegister and
    cmnClassServices.

  - A random sequence generator. For more information, see
    cmnRandomSequence.

  - A type trait class used to define common values for different
    types (e.g. default tolerance for float, double, int).  See
    cmnTypeTraits.

  \note
  All the classes and global functions of cisstCommon start with
  the prefix cmn.  To use cisstCommon, you can either include the
  files one by one with:
  \code
  #include <cisstCommon/cmnXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstCommon.h>
  \endcode
*/


/*!
  \defgroup cisstVector Vectors

  Vectors and matrices, including all the tools for simple 3D
  computations.  The main features of cisstVector are:

  - A set of containers for fixed size vectors and matrices.  For more
    information, see vctFixedSizeVector and vctFixedSizeMatrix.

  - A set of containers for dynamic vectors and matrices.  For more
    information, see vctDynamicVector and vctDynamicMatrix.

  - A definition of a frame based on a translation and a rotation
    (represented either by a matrix in 2D/3D or a quaternion in 3D).
    See vctQuaternionRotation3, vctMatrixRotation3,
    vctRodriguezRotation3, vctAxisAngleRotation3, vctAngleRotation2,
    vctMatrixRotation2 and vctFrameBase.
 
  - A user friendly API for the most commonly used vectors.  For more
    information, see ::vctDouble2 (::vct2), ::vctFloat3,
    ::vctDouble3x3 (::vct2), ::vctInt3x3, ::vctAxAnRot3,
    ::vctQuatRot3, ::vctFrm3, etc.  The complete lists of defined types
    can be found in:
    <ul>
      <li>vctFixedSizeVectorTypes.h
      <li>vctFixedSizeMatrixTypes.h
      <li>vctDynamicVectorTypes.h
      <li>vctDynamicMatrixTypes.h
      <li>vctTransformationTypes.h
    </ul>

  - Some functions for cisstVector classes such as ::vctRandom.

  \note
  All the classes and global functions of cisstVector start with
  the prefix vct.  To use cisstVector, you can either include the
  files one by one with:
  \code
  #include <cisstVector/vctXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstVector.h>
  \endcode
*/


/*!
  \defgroup cisstNumerical Numerical Methods

  The main features of cisstNumerical are:

  - nmrStandardPolynomial and nmrBernsteinPolynomial.

  - Specialized functions for fixed size containers.  These
    functions have been written to take into account a specific
    dimension or size and therefore avoid loops as much as possible.
    They tend to be faster than their LAPACK based conterparts.
    <ul>
    <li>::nmrGaussJordanInverse2x2
    <li>::nmrGaussJordanInverse3x3
    <li>::nmrGaussJordanInverse4x4
    </ul>

  - Functions and classes for linear algebra.  These functions can
    handle both fixed size and dynamic containers.  Some basic
    functions have been implemented using cisst only while
    others are wrappers for existing Fortran code.  Please note that
    the Fortran wrappers are compiled only if either
    CISST_HAS_CNETLIB or CISST_HAS_CISSTNETLIB has been set during the
    CMake configuration of cisst (see http://www.cisst.org/cnetlib).
    <ul>
    <li>cisst native functionalities:
      <ul>
      <li>::nmrIsOrthonormal (with nmrIsOrthonormalDynamicData and nmrIsOrthonormalFixedSizeData)
      </ul>

    <li>Fortran wrappers:
      <ul>
      <li>::nmrInverse (with nmrInverseDynamicData and nmrInverseFixedSizeData)
      <li>::nmrLU (with nmrLUDynamicData and nmrLUFixedSizeData)
      <li>::nmrPInverse (with nmrPInverseDynamicData and nmrPInverseFixedSizeData)
      <li>::nmrSVD (with nmrSVDDynamicData and nmrSVDFixedSizeData)
      </ul>
    </ul>

  \note
  All the classes and global functions of cisstNumerical start with
  the prefix nmr.  To use cisstNumerical, you can either include the
  files one by one with:
  \code
  #include <cisstNumerical/nmrXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstNumerical.h>
  \endcode
*/


/*!
  \defgroup cisstInteractive Interactive Research Environment

  A collection of Python scripts and C++ classes to start a Python
  interactive shell from a C++ application.  See mainly ireFramework.

  \note
  All the classes and global functions of cisstInteractive start with
  the prefix ire.  To use cisstInteractive, you can either include the
  files one by one with:
  \code
  #include <cisstInteractive/ireXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstInteractive.h>
  \endcode
*/


/*!
  \defgroup cisstOSAbstraction OS Abstraction

  \note
  All the classes and global functions of cisstOSAbstraction start with
  the prefix osa.  To use cisstOSAbstraction, you can either include the
  files one by one with:
  \code
  #include <cisstOSAbstraction/osaXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstOSAbstraction.h>
  \endcode
*/


/*!
  \defgroup cisstDeviceInterface Device Interface

  \note
  All the classes and global functions of cisstDeviceInterface start with
  the prefix ddi.  To use cisstDeviceInterface, you can either include the
  files one by one with:
  \code
  #include <cisstDeviceInterface/ddiXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstDeviceInterface.h>
  \endcode
*/


/*!
  \defgroup cisstRealTime Real Time Support

  \note
  All the classes and global functions of cisstRealTime start with
  the prefix rts.  To use cisstRealTime, you can either include the
  files one by one with:
  \code
  #include <cisstRealTime/rtsXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstRealTime.h>
  \endcode
*/


/*!
  \defgroup cisstTracker Tracking Devices

  \note
  All the classes and global functions of cisstTracker start with
  the prefix trk.  To use cisstTracker, you can either include the
  files one by one with:
  \code
  #include <cisstTracker/trkXyz.h>
  \endcode
  or include all the files with:
  \code
  #include <cisstTracker.h>
  \endcode

*/


/*

$Log: main.dox,v $
Revision 1.14  2006/02/01 07:29:22  anton
main.dox: Minor typo.

Revision 1.13  2006/01/28 05:59:25  anton
cisstNumerical: Added nmrInverse with tests, doxygen documentation and
example for numerical quickstart.  See #207.

Revision 1.12  2006/01/27 01:04:50  anton
doc: Renamed "solution" to "data" (see #205).

Revision 1.11  2006/01/11 06:56:50  anton
main.dox:  Added module name for cisstInteractive.

Revision 1.10  2006/01/10 23:30:13  anton
Doxygen main: Added extra links to top API classes.   Updated to use \code
instead of <pre>.

Revision 1.9  2005/12/23 21:30:16  anton
main.dox: Updated general description of cisstCommon, cisstVector and
cisstNumerical.

Revision 1.8  2005/09/09 15:10:56  anton
Doxygen: Added the license.

Revision 1.7  2004/11/08 18:13:57  anton
Doxygen: Added module cisstNumerical to the modules index.

Revision 1.6  2004/09/03 20:00:01  anton
Doxygen documentation: Updated the main page of doxygen to have a better
description of the important classes for cisstCommon and cisstVector.

Revision 1.5  2004/05/04 14:34:18  anton
Added groups for OSAbstraction, DeviceInterface, RealTime and Tracker

Revision 1.4  2004/04/06 15:24:06  anton
Added instructions for includes, completed the description of cisstVector

Revision 1.3  2003/10/03 19:07:13  anton
added a short introduction

Revision 1.2  2003/09/09 19:00:14  anton
renamed defgroup to match cisstXXX

Revision 1.1  2003/08/06 13:55:07  anton
Creation


*/
