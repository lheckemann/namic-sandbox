#!/bin/tcsh

#
# Assume $HOME/.login exists.
# Assume $HOME/.cshrc exists.
# Assume $HOME/.profile exists.
#
# Assume the user of this script has the following defined in his/her
# environment;
#    CVSROOT
#    CVS_RSH
#    ARCH
#    BUILD_DIR
#    MAILING_LIST
#
# Assume the file $HOME/.build_testrc exists 
#
# Assume that the file $HOME/.profile exists.
#   Note: the .profile must contain the path to make or gmake.
#
# The file, $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc is used 
# as the resource file.
#

source $HOME/.login
source $HOME/.cshrc

set HOST = `hostname -s`
echo "HOST = " $HOST

if !(-f $HOME/$HOST/.build_testrc) then
   echo $HOME/$HOST/".build_testrc file does not exist, exiting..."
   exit
else
   source $HOME/$HOST/.build_testrc
endif

# Setup environment.
if (${?ARCH}) then
   if ($ARCH == SGI) then
      set MAKE = `which gmake`
      set MAIL = /usr/sbin/mailx
      set GREP = /usr/gnu/bin/grep
   else if ($ARCH == athlon) then
      set MAKE = `which make`
      set MAIL = /bin/mail
      set GREP = /bin/grep
   else if ($ARCH == ix86 ) then
      set MAKE = `which make`
      set MAIL = /bin/mail
      set GREP = `which grep`
   else if ($ARCH == icc ) then
      set MAKE = `which make`
      set MAIL = /bin/mail
      set GREP = /bin/grep
   else if ($ARCH == gcc3 ) then
      set MAKE = `which make`
      set MAIL = /bin/mail
      set GREP = /bin/grep
   else
      echo "Unsupported architecture, exiting..."
      exit
   endif
else 
   echo "ARCH is not set, exiting..."
   exit
endif

echo "ARCH = " $ARCH
echo "MAKE = " $MAKE
echo "MAIL = " $MAIL

if ($#argv == 0) then
   echo
   echo ERROR: required parameter missing
   echo "Usage:"
   echo "build_test DEBUG | FAST"
   echo
   exit
endif

if ($argv[1] == DEBUG) then
   setenv ABI DEBUG
else if ($argv[1] == FAST) then
   setenv ABI FAST
else
   echo "Invalid parameter, exiting..."
   exit
endif

echo "ABI = " $ABI

if !(${?RESEARCHHOME}) then
   echo "RESEARCHHOME is not set, exiting..."
   exit
else
   echo "RESEARCHHOME = " $RESEARCHHOME
endif

if !(${?MAILING_LIST}) then
   echo "MAILING_LIST is not set, using default."
   set MAILING_LIST = jtodtz@nash.psychiatry.uiowa.edu
endif

echo "MAILING_LIST = " $MAILING_LIST

if !(-d $PURIFY_HOME/.build_test_dir) then
   mkdir $PURIFY_HOME/.build_test_dir
endif

# Get the time stamp.
set DateTimeStamp = `date +"%h%d_%Y_%H_%M"`

# Define the cron log file name.
set CRON_LOG_FILE = $HOST.$ARCH.$ABI.cron.`date +\%h\%d_\%Y`

if !(${?BUILD_DIR}) then
   echo "BUILD_DIR is not set, exiting..."
   exit
else
   echo "BUILD_DIR = " $BUILD_DIR
endif

if !(-e $BUILD_DIR) then
   mkdir $BUILD_DIR 
endif

# delete the .cron files in .build_test_dir
find $PURIFY_HOME/.build_test_dir -name "$HOST.cron*" -ctime +14 -exec rm -f {} \;

# delete the $HOST.errors.out files in .build_test_dir
find $PURIFY_HOME/.build_test_dir -name "$HOST.errors.out*" -ctime +14 -exec rm -f {} \;

# Remove $HOST.errors.out.$DateTimeStamp if it exists.
if (-e $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp) then
   rm -f $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
endif

echo "ABI  = " $ABI >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
echo "ARCH = " $ARCH >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
echo "The cron output from this build can be found in "$PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
echo "The cron output from the freeware build can be found in "$PURIFY_HOME/.build_test_dir/$CRON_LOG_FILE >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp

# Check to see if brains2 module was successfully checked out.
if !(-d $BUILD_DIR/brains2) then
   echo "brains2 module was not successfully checked out, exiting"
   echo "If this was executed as a cron job, check the cron output file, " $PURIFY_HOME/.build_test_dir/$CRON_LOG_FILE >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   $MAIL -s "`hostname -s`: cvs co brains2 failed" $MAILING_LIST < $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   #ln -s $PURIFY_HOME/.build_test_dir/$CRON_LOG_FILE $PURIFY_HOME/.build_test_dir/BUILD_FAILED
   exit
endif

# Check to see if buildhome module was successfully checked out.
if !(-d $BUILD_DIR/buildhome) then
   echo "buildhome module was not successfully checked out, exiting"
   echo "Check the cron output file, " $PURIFY_HOME/.build_test_dir/$CRON_LOG_FILE >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   $MAIL -s "`hostname -s`: cvs co buildhome failed" $MAILING_LIST < $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   #ln -s $PURIFY_HOME/.build_test_dir/$CRON_LOG_FILE $PURIFY_HOME/.build_test_dir/BUILD_FAILED
   exit
endif

# Build all required executables.
echo "Building all required executables..."

   echo "Running make iplscriptinstall..."
   cd $BUILD_DIR/brains2; $MAKE iplscriptinstall

   echo "Building iplFreeware..."
   cd $BUILD_DIR/brains2/iplFreeware; $MAKE -k

   if (-e $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp) then
      rm -f $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp 
   endif

   if (-e $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp.new) then
      rm -f $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp.new
   endif

   echo "Building " $BUILD_DIR"/brains2/src..."
   cd $BUILD_DIR/brains2/src; $MAKE -k >& $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp

   echo "Building iplContrib..."
   cd $BUILD_DIR/brains2/iplContrib; $MAKE -k

   echo "Completed Building"
   cd $PURIFY_HOME/.build_test_dir 
   if ($ARCH == SGI) then
      $GREP -n -A 1 "CC: ERROR File" $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
      $GREP -n "errors detected in the compilation of" $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
      $GREP -n "ld32: FATAL" $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
      $GREP -n -A 3 "CC: WARNING File = " $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
   endif
   if (($ARCH == athlon) || ($ARCH == icc) || ($ARCH == gcc3)) then
      $GREP -n -A 1 ": error: " $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
      $GREP -n -A 1 "compilation aborted for" $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
      $GREP -n -B 1 -A 1 " Error " $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
      $GREP -n -A 1 ": warning: " $HOST.src.out.$DateTimeStamp >> $HOST.src.out.$DateTimeStamp.new
   endif

   # Insert error and warning messages if they exist.
   if !(-z $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp.new) then
      cat $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp.new >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   endif
   if (-z $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp.new) then
      echo "No WARNINGS or ERRORS to report." >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   endif

   echo "Installing all required executables..."
   cd $BUILD_DIR/brains2/src; $MAKE install
   echo "Completed installing all required executables."

   # Check if all the executables exist.
   if !(-e $PURIFY_HOME/.build_test_dir/executables.$ARCH) then
      echo "Could not check for executables." >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   else
     echo "Creating a list of executables..."
     cd $BUILD_DIR/buildhome/$ARCH/$ABI/bin
     foreach x (`cat $PURIFY_HOME/.build_test_dir/executables.$ARCH`)
        basename `find . -name $x` >> $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.new            
     end
     if !(-e $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.new) then
        echo "Could not create list of executables;" >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
     else
        diff $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.new $PURIFY_HOME/.build_test_dir/executables.$ARCH >> $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.diff
        if !(-z $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.diff) then
           echo "The following failed to build;" >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
           cat $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.diff >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
        else
           echo "Successfully built all executables." >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
        endif
     endif
     # Cleanup the temp files.
     if (-e $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.diff) then
        rm -f $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.diff
     endif
     if (-e $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.new) then
        rm -f $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.executables.new
     endif
     if (-e $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp.new) then
        rm -f $PURIFY_HOME/.build_test_dir/$HOST.src.out.$DateTimeStamp.new
     endif
   endif

# Check to see if the build failed.
if !(-f $RESEARCHHOME/$ARCH/$ABI/bin/brains2) then
   echo "brains2 build failed, exiting..." 
   echo "Check the cron output file, " $PURIFY_HOME/.build_test_dir/$CRON_LOG_FILE >> $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp 
   $MAIL -s "`hostname -s`: $ARCH $ABI build failed" $MAILING_LIST < $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp
   exit
endif

$MAIL -s "`hostname -s`: $ARCH $ABI build success" $MAILING_LIST < $PURIFY_HOME/.build_test_dir/$HOST.errors.out.$DateTimeStamp 

# Let testdriver know the build was successful.
if (-e $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.SUCCESS) then
   rm -f $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.SUCCESS
endif
   
echo "SUCCESS" >> $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.SUCCESS

