#!/bin/tcsh

#########################################################################
#                                                                       #
# Note: The following file is a crude beginning to an automated cron    #
# job which will run regression tests.                                  #
#                                                                       #
#########################################################################
#
# Assume $HOME/.login exists.
# Assume $HOME/.cshrc exists.
# Assume $HOME/.profile exists.
#
# The cron job assumes that the file $HOME/bin/testdriver exists.
#
# Assume that the file $HOME/.profile exists.
#   Note: the .profile must contain the path to make or gmake.
#
# Assume regressionmodule module is checked out to $HOME.
#
# Assume regressiontest module is checked out to $HOME.
#
# Assume brains2 module is checked out to $HOME/src.
#
# Assume buildhome module is checked out to $HOME/src.
#
# The directory, $HOME/.testdriver_dir is created during
# the execution of this script (if it does not already exist).
#
# To modify the mailing list, edit or create the file
# $HOME/.testdriver_dir/mailing_list
#
# Output files are save in a subdirectory under 
# $HOME/regressionmodule/$ARCH/$ABI/$DateTimeStamp
#
# Test module output filenames are created by concatenating
# the test module name with the DateTimeStamp.  Those log 
# files which do not contain the string, "REGR_ERROR" are
# assumed to contain no errors and are deleted.
#
# When running the purified test, the *.plog and *.pv 
# files are saved to the subdirectory;
# $HOME/regressionmodule/$ARCH/$ABI/$DateTimeStamp
#
# The file, "errors.out" is created in the subdirectory;
# $HOME/regressionmodule/$ARCH/$ABI/$DateTimeStamp
# and contains a listing of modules which failed, followed
# by the author of the test.  If running the purified test,
# the file may also contain a listing of purifed tests which
# contained access errors, followed by the test author's name.
#
# The file, $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc is used 
# as the resource file.
#

source $HOME/.login
source $HOME/.cshrc

set HOST = `hostname -s`
echo "HOST = " $HOST

source $HOME/$HOST/.build_testrc

# Setup environment.
if (${?ARCH}) then
   if ($ARCH == SGI) then
      set MAIL = /usr/sbin/mailx
   else if ($ARCH == athlon) then
      set MAIL = /bin/mail
   else if ($ARCH == ix86 ) then
      set MAIL = /bin/mail
   else if ($ARCH == icc ) then
      set MAIL = /bin/mail
   else if ($ARCH == gcc3 ) then
      set MAIL = /bin/mail
   else
      echo "Unsupported architecture, exiting..."
      exit
   endif
   echo "ARCH = " $ARCH
else 
   echo "ARCH is not set, exiting..."
   exit
endif

if !(-f $HOME/$HOST/.build_testrc) then
   echo $HOME/$HOST/".build_testrc file does not exist, exiting..."
   exit
else
   source $HOME/$HOST/.build_testrc
endif

set RESEARCHHOME = $PURIFY_HOME/src/buildhome
echo "RESEARCHHOME = " $RESEARCHHOME

echo "PATH = " $PATH

set TMP_DIR = $PURIFY_HOME/.testdriver_dir

# Pick up MAILING_LIST from .build_testrc file.
if !(${?MAILING_LIST}) then
   echo "MAILING_LIST is not set, using default."
   set MAILING_LIST = jtodtz@nash.psychiatry.uiowa.edu
endif

echo "MAILING_LIST = " $MAILING_LIST

if ($#argv == 0) then
   echo
   echo ERROR: required parameter missing
   echo "Usage:"
   echo "testdriver ARCH [purify | DEBUG | FAST] [filename]"
   echo "Where filename is an optional text file containing a list of test"
   echo "modules to be executed, one test per line, without .tcl suffix."
   echo
   exit
endif

# Clean up old files before creating more.
# Delete the .cron files in .testdriver_dir which are over 14 days old.
echo "Deleting old cron logs"
find $PURIFY_HOME/.testdriver_dir -name "$HOST.cron*" -ctime +14 -exec rm -f {} \;

#delete the directories and files in $PURIFY_HOME/regressionmodule/$ARCH/FAST which are over 14 days old.
if (-d $PURIFY_HOME/regressionmodule/$ARCH/FAST) then
   echo "Deleting old files in FAST dir"
   find $PURIFY_HOME/regressionmodule/$ARCH/FAST/* -prune -type d -ctime +14 -exec rm -rf {} \;
endif

# Delete the directories and files in $PURIFY_HOME/regressionmodule/$ARCH/DEBUG which are over 14 days old.
if (-d $PURIFY_HOME/regressionmodule/$ARCH/DEBUG) then
   echo "Deleting old files in DEBUG dir"
   find $PURIFY_HOME/regressionmodule/$ARCH/DEBUG/* -prune -type d -ctime +14 -exec rm -rf {} \;
endif

set ARCH = $argv[1]
echo "ARCH = " $ARCH

if ($argv[2] == purify) then
   echo "Executing purified brains2 with purified filters." 
   set purify_state = 2
   set CRON_LOG_FILE = $HOST.$ARCH.purify.cron.`date +\%h\%d_\%Y`
   setenv ABI DEBUG
else if ($argv[2] == FAST) then
   echo "Executing nonpurified brains2, with nonpurified filters."
   set purify_state = 0
   setenv ABI FAST
   set CRON_LOG_FILE = $HOST.$ARCH.$ABI.cron.`date +\%h\%d_\%Y`
else if ($argv[2] == DEBUG) then
   echo "Executing nonpurified brains2, with nonpurified filters."
   set purify_state = 0
   setenv ABI DEBUG
   set CRON_LOG_FILE = $HOST.$ARCH.$ABI.cron.`date +\%h\%d_\%Y`
else
   echo "ERROR: Invalid parameter"
   echo "Usage:"
   echo "testdriver ARCH [purify | DEBUG | FAST] [filename]"
   exit
endif

if (${#argv} == 3) then
   if !(-e $argv[3]) then
      echo $argv[3] " does not exist, exiting..."
      exit
   endif
   set REGRESSION_TESTS = $argv[3]
endif

# Define the shared library path.
setenv LD_LIBRARY_PATH $RESEARCHHOME/$ARCH/$ABI/lib:$RESEARCHHOME/$ARCH/$ABI/lib/InsightToolkit
echo "LD_LIBRARY_PATH = " $LD_LIBRARY_PATH

# Get the time stamp.
set DateTimeStamp = `date +"%h%d_%Y_%H_%M"`

if ($purify_state > 0) then
   #configure environment for purify
   echo "Defining purify options..."
   setenv PURIFYOPTIONS '-windows=no -chain-length=100 -log-file=%v-%p.plog -view-file=%v-%p.pv -suppression-filenames=$HOME/.purify '
endif

if !(-d $PURIFY_HOME/regressionmodule/$ARCH) then
   mkdir $PURIFY_HOME/regressionmodule/$ARCH
endif

if !(-d $PURIFY_HOME/regressionmodule/$ARCH/$ABI) then
   mkdir $PURIFY_HOME/regressionmodule/$ARCH/$ABI
endif

set PARENT_DIR = $PURIFY_HOME/regressionmodule/$ARCH/$ABI

# Create the test output directory.
if !(-d $PARENT_DIR/$DateTimeStamp) then
   mkdir $PARENT_DIR/$DateTimeStamp
else
   echo "Error: " $PARENT_DIR/$DateTimeStamp "already exists."
endif

# Check to see if the build was a success.
set counter = 0
while !(-e $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.SUCCESS)
   echo "Build has not completed successfully yet." `date` >> $PARENT_DIR/$DateTimeStamp/errors.out
   # Wait 15 minutes and check again. 
   sleep 900
   @ counter = $counter + 1
   if ($counter == 24) then
      echo "Giving up after 6 hours. " >> $PARENT_DIR/$DateTimeStamp/errors.out
      $MAIL -s "`hostname -s`: $ARCH $ABI test output" $MAILING_LIST < $PARENT_DIR/$DateTimeStamp/errors.out
      exit
   endif
end

# Cleanup the build success file.
rm -f $PURIFY_HOME/.build_test_dir/$HOST.$ARCH.$ABI.SUCCESS

if !(-e $PURIFY_HOME/regressionmodule/module) then
   echo "Missing directory $PURIFY_HOME/regressionmodule/module...exiting"
   exit
endif

if (${#argv} == 2) then
   # Create a list of modules to be tested.
   echo "Creating a list of modules to test..."
   if (-e $TMP_DIR/$HOST.$ARCH.$ABI.modules.tcl.tmp) then
      rm $TMP_DIR/$HOST.$ARCH.$ABI.modules.tcl.tmp
   endif

   cd $PURIFY_HOME/regressionmodule/module
   ls -1 *.tcl > $TMP_DIR/$HOST.$ARCH.$ABI.modules.tcl.tmp

   # Create a file containing the module names without the tcl file suffix.
   if (-e $TMP_DIR/$HOST.$ARCH.$ABI.modules.tmp) then
      rm $TMP_DIR/$HOST.$ARCH.$ABI.modules.tmp
   endif

   # Strip the .tcl suffix from file names in order to create a list of modules.
   sed s/.tcl//g $TMP_DIR/$HOST.$ARCH.$ABI.modules.tcl.tmp > $TMP_DIR/$HOST.$ARCH.$ABI.modules.tmp
 
   set REGRESSION_TESTS = $TMP_DIR/$HOST.$ARCH.$ABI.modules.tmp
endif

echo "The list of regression tests is in the file " $REGRESSION_TESTS

set test_directory = $PURIFY_HOME/regressiontest

if ($purify_state > 1) then
   # Create a list of executables for purify.

   echo "Creating a list of filter executables to purify..."
   if (-e $TMP_DIR/$HOST.$ARCH.$ABI.f_executables.tmp) then
      rm $TMP_DIR/$HOST.$ARCH.$ABI.f_executables.tmp
   endif

   if !(-e $RESEARCHHOME/$ARCH/$ABI/bin) then
      echo "Missing directory $RESEARCHHOME/$ARCH/$ABI/bin...exiting"
      exit
   endif

   cd $RESEARCHHOME/$ARCH/$ABI/bin
   ls -1 *filter > $TMP_DIR/$HOST.$ARCH.$ABI.f_executables.tmp

   # Loop through the list of executables and purify each one.

   echo "Purifying all the executables..."
   foreach x (`cat $TMP_DIR/$HOST.$ARCH.$ABI.f_executables.tmp`)
      if (-e $x) then
         echo "Attempting to purify " $x
         purify $x  
      else
         echo "Unable to purify " $x 
      endif
   end

   # Modify the brains2rc file to refrerence the *.pure filter names.
   sed s/filter/filter.pure/g $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc > $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc.pure
   cp $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc.pure $PURIFY_HOME/.brains2rc
endif


if ($purify_state > 0) then
   # purify brains2
   cd $RESEARCHHOME/$ARCH/$ABI/bin
   if (-e $RESEARCHHOME/$ARCH/$ABI/bin/brains2.pure) then
      rm -f $RESEARCHHOME/$ARCH/$ABI/bin/brains2.pure
   endif

   echo "purifying brains2..."
   purify brains2
   echo "Completed purifying brains2."
endif

if ($purify_state == 0) then
   cp $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc $PURIFY_HOME/.brains2rc
   echo "Regression tests ran using non-purified brains2 and non-purified filters." >> $PARENT_DIR/$DateTimeStamp/errors.out
   echo "Test output files exist in " $PARENT_DIR/$DateTimeStamp >> $PARENT_DIR/$DateTimeStamp/errors.out
else if ($purify_state == 1) then
   echo "Regression tests ran using purified brains2 and non-purified filters." >> $PARENT_DIR/$DateTimeStamp/errors.out
   echo "Test output files exist in " $PARENT_DIR/$DateTimeStamp >> $PARENT_DIR/$DateTimeStamp/errors.out
else if ($purify_state == 2) then
   echo "Regression tests ran using purified brains2 and purified filters." >> $PARENT_DIR/$DateTimeStamp/errors.out
   echo "Test output files exist in " $PARENT_DIR/$DateTimeStamp >> $PARENT_DIR/$DateTimeStamp/errors.out
else
   echo "Invalid purify_state encountered...exiting"
   exit 1
endif 

echo >> $PARENT_DIR/$DateTimeStamp/errors.out
echo "The cron output for these tests can be found in " $PURIFY_HOME/.testdriver_dir/$CRON_LOG_FILE >> $PARENT_DIR/$DateTimeStamp/errors.out
echo >> $PARENT_DIR/$DateTimeStamp/errors.out

# Loop through the list of module tests.
foreach x (`cat $REGRESSION_TESTS`)

   # Create a subdir for each test in order to keep the appropriate filter plog and pv files with the correct test.
   if !(-d $PARENT_DIR/$DateTimeStamp/$x) then
      mkdir $PARENT_DIR/$DateTimeStamp/$x
   endif

   # This subdir is required by some tests.
   if !(-d $PARENT_DIR/$DateTimeStamp/$x/$ARCH) then
      mkdir $PARENT_DIR/$DateTimeStamp/$x/$ARCH
   endif

   if !(-d $PARENT_DIR/$DateTimeStamp/$x/$ARCH/$ABI) then
      mkdir $PARENT_DIR/$DateTimeStamp/$x/$ARCH/$ABI
   endif

   cd $PARENT_DIR/$DateTimeStamp/$x

   echo Testing  $x
   if (-e $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl) then
      rm $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl
   endif

   # Create the tcl test script.
   echo source $PURIFY_HOME/regressionmodule/module/util/ReportTestStatus.tcl >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl
   echo source $PURIFY_HOME/regressionmodule/module/util/ModuleUtils.tcl >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl
   echo source $PURIFY_HOME/regressionmodule/module/util/TestDriverUtils.tcl >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl
   echo source $PURIFY_HOME/regressionmodule/module/$x.tcl >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl
   echo $x $test_directory $DateTimeStamp >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl

   # Keep the $HOST.$ARCH.$ABI.tmp.tcl around for debugging purposes.
   cp $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl $PARENT_DIR/$DateTimeStamp/$x/$x.tmp.tcl

   if ($purify_state > 0) then
      if (-e $PARENT_DIR/$DateTimeStamp/$x/brains2.pure.plog) then
         rm $PARENT_DIR/$DateTimeStamp/$x/brains2.pure.plog
      endif

      if (-e $PARENT_DIR/$DateTimeStamp/$x/brains2.pure.pv) then
         rm $PARENT_DIR/$DateTimeStamp/$x/brains2.pure.pv
      endif
   endif

   if ($purify_state == 0) then
      set brains2exec = "$RESEARCHHOME/$ARCH/$ABI/bin/brains2 -config $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc"
   else if ($purify_state == 1) then
      setenv PURIFYOPTIONS "-windows=no -chain-length=100 -log-file=$PARENT_DIR/$DateTimeStamp/$x/%v-%p.plog -view-file=$PARENT_DIR/$DateTimeStamp/$x/%v-%p.pv"
      set brains2exec = "$RESEARCHHOME/$ARCH/$ABI/bin/brains2.pure -config $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc"
   else if ($purify_state == 2) then
      setenv PURIFYOPTIONS "-windows=no -chain-length=100 -log-file=$PARENT_DIR/$DateTimeStamp/$x/%v-%p.plog -view-file=$PARENT_DIR/$DateTimeStamp/$x/%v-%p.pv"
      set brains2exec = "$RESEARCHHOME/$ARCH/$ABI/bin/brains2.pure -config $RESEARCHHOME/$ARCH/$ABI/bin/brains2rc.pure"
   else  
      echo "Unable to set brains2exec, exiting."
      exit 1
   endif

   echo "Attempting to execute "$brains2exec -b $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl

   $brains2exec -b $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl
   echo brains2 finished running.

   # Check for errors in the log file. 
   if (-e $PARENT_DIR/$DateTimeStamp/$x/$x\_$DateTimeStamp) then
      if (-e $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file) then
         rm -f $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file
      endif

      grep REGR_ERROR $PARENT_DIR/$DateTimeStamp/$x/$x\_$DateTimeStamp >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file
      if (-z $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file) then
         # Remove the files which contained no errors.
         set DeleteLogFile = 1
      else
         set DeleteLogFile = 0
         echo -n `grep "Regression Test Author - " $x\_$DateTimeStamp | sed s/'Regression Test Author - '//g` >> $PARENT_DIR/$DateTimeStamp/errors.out
         echo ": " $x\_$DateTimeStamp >> $PARENT_DIR/$DateTimeStamp/errors.out
         echo >> $PARENT_DIR/$DateTimeStamp/errors.out
      endif
      if ($purify_state > 0) then
         if (-e $PARENT_DIR/$DateTimeStamp/$x/tmp.plogs) then
            rm -f $PARENT_DIR/$DateTimeStamp/$x/tmp.plogs
         endif
         ls -1 $PARENT_DIR/$DateTimeStamp/$x/*.plog >> $PARENT_DIR/$DateTimeStamp/$x/tmp.plogs

         if !(-z $PARENT_DIR/$DateTimeStamp/$x/tmp.plogs) then
          
            set FIRST_ERROR = 1
 
            foreach plogfile (`cat $PARENT_DIR/$DateTimeStamp/$x/tmp.plogs`)
               if (-e $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file) then
                  rm -f $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file 
               endif
               grep error $plogfile | grep -v " 0 access errors" >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file
 
               if !(-z $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file) then
                  if ($FIRST_ERROR) then
                     echo $x " : " >> $PARENT_DIR/$DateTimeStamp/errors.out 
                     set FIRST_ERROR = 0
                  endif
                  #echo -n `grep "Regression Test Author - " $x\_$DateTimeStamp | sed s/'Regression Test Author - '//g` >> $PARENT_DIR/$DateTimeStamp/errors.out
                  echo "   " `basename $plogfile` " : " >> $PARENT_DIR/$DateTimeStamp/errors.out
                  cat $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file >> $PARENT_DIR/$DateTimeStamp/errors.out 
               else # remove the plog files with no access errors
                  rm -f $plogfile
               endif
            end # foreach loop
            rm -f $PARENT_DIR/$DateTimeStamp/$x/tmp.plogs
            rm -f $PARENT_DIR/$DateTimeStamp/$x/*.pv
         endif
      endif

      if ($DeleteLogFile == 1) then
         # check to see if the test actually completed.
         if (-e $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file) then
            rm -f $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file
         endif
         grep "Ending Time" $PARENT_DIR/$DateTimeStamp/$x/$x\_$DateTimeStamp >> $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file
         if (-z $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file) then
            echo $x "test failed to complete." >> $PARENT_DIR/$DateTimeStamp/errors.out
         else
            #echo $x " contained no errors." >> $PARENT_DIR/$DateTimeStamp/errors.out
            #echo >> $PARENT_DIR/$DateTimeStamp/errors.out
            rm $PARENT_DIR/$DateTimeStamp/$x/$x\_$DateTimeStamp 
         endif
      endif
   else 
      echo "Unable to execute" $x "test." >> $PARENT_DIR/$DateTimeStamp/errors.out
   endif

end # foreach loop

echo "Completed executing regression tests." >> $PARENT_DIR/$DateTimeStamp/errors.out

if ($purify_state == 2) then
   setenv ABI purify
endif

if (-e $PARENT_DIR/$DateTimeStamp/errors.out) then
   $MAIL -s "`hostname -s`: $ARCH $ABI test output" $MAILING_LIST < $PARENT_DIR/$DateTimeStamp/errors.out
else
   $MAIL -s "`hostname -s`: $ARCH $ABI no errors in regression tests" $MAILING_LIST < /dev/null
endif

# Clean up temporary files.
if (-e $TMP_DIR/$HOST.$ARCH.$ABI.modules.tmp) then
   rm $TMP_DIR/$HOST.$ARCH.$ABI.modules.tmp 
endif

if (-e $TMP_DIR/$HOST.$ARCH.$ABI.modules.tcl.tmp) then
   rm $TMP_DIR/$HOST.$ARCH.$ABI.modules.tcl.tmp 
endif

if (-e $TMP_DIR/$HOST.$ARCH.$ABI.f_executables.tmp) then
   rm $TMP_DIR/$HOST.$ARCH.$ABI.f_executables.tmp
endif

if (-e $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl) then
   rm $TMP_DIR/$HOST.$ARCH.$ABI.tmp.tcl
endif

if (-e $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file) then
   rm $TMP_DIR/$HOST.$ARCH.$ABI.tmp_file
endif

